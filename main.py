import os
import logging
from telebot import TeleBot, types

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è ====
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))             # —Ç–≤—ñ–π telegram id (–¥–ª—è –∑–∞—è–≤–æ–∫ —ñ –¥–æ—Å—Ç—É–ø—É –¥–æ /post)
CHANNEL_ID = os.getenv("CHANNEL_ID")                   # -100xxxxxxxxxx –∞–±–æ @username
PHONE_E164 = os.getenv("PHONE_E164", "+380960670190")  # –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏"
PHONE_READABLE = os.getenv("PHONE_READABLE", "+38 096 067 01 90")

assert BOT_TOKEN and CHANNEL_ID, "BOT_TOKEN —ñ CHANNEL_ID –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ!"

logging.basicConfig(level=logging.INFO)
bot = TeleBot(BOT_TOKEN, parse_mode="HTML")

# –ü–∞–º‚Äô—è—Ç—å –¥—ñ–∞–ª–æ–≥—ñ–≤ –∑–∞—è–≤–∫–∏ (–¥—É–∂–µ –ø—Ä–æ—Å—Ç–∞)
orders = {}  # user_id -> {"step": str, "data": {...}}

# ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ =====
def is_admin(user_id: int) -> bool:
    return ADMIN_ID and user_id == ADMIN_ID

def channel_button_row():
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üìû –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏", url=f"tel:{PHONE_E164}"),
        types.InlineKeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="order_start"),
    )
    return kb

def order_summary(data: dict) -> str:
    return (
        "<b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
        f"üöó –ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å: <b>{data.get('car','-')}</b>\n"
        f"üí∏ –ë—é–¥–∂–µ—Ç: <b>{data.get('budget','-')}</b>\n"
        f"üìÖ –†—ñ–∫: <b>{data.get('year','-')}</b>\n"
        f"üë§ –Ü–º'—è: <b>{data.get('name','-')}</b>\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: <b>{data.get('contact','-')}</b>\n"
        f"üÜî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <code>{data.get('username','-')}</code>"
    )

# ===== –ö–æ–º–∞–Ω–¥–∏ –≤ –ø—Ä–∏–≤–∞—Ç—ñ =====
@bot.message_handler(commands=["start", "help"])
def start_cmd(m):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É"))
    kb.add(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"))
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse.te</b>.\n"
        "–Ø –º–æ–∂—É –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –∞–≤—Ç–æ —Ç–∞\n"
        "–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>‚Äú–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É‚Äù</b> —â–æ–± –ø–æ—á–∞—Ç–∏."
    )
    bot.send_message(m.chat.id, text, reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def contacts_msg(m):
    bot.send_message(
        m.chat.id,
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{PHONE_READABLE}</b>\n"
        "üìç –¢–µ—Ä–Ω–æ–ø—ñ–ª—å\n"
        "–ü–∏—à—ñ—Ç—å —Å—é–¥–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏ –ø—ñ–¥ –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª—ñ.",
    )

@bot.message_handler(func=lambda m: m.text == "üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")
def order_from_menu(m):
    start_order(m)

# ===== –•–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—è–≤–æ–∫ =====
def start_order(m):
    uid = m.from_user.id
    orders[uid] = {"step": "car", "data": {"username": m.from_user.username or m.from_user.id}}
    bot.send_message(uid, "üöó –í–∫–∞–∂—ñ—Ç—å <b>–º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å</b> –∞–≤—Ç–æ (–Ω–∞–ø—Ä. BMW 3 Series).")

@bot.callback_query_handler(func=lambda c: c.data == "order_start")
def cb_order(c):
    bot.answer_callback_query(c.id)
    start_order(c.message)

@bot.message_handler(func=lambda m: orders.get(m.from_user.id, {}).get("step") == "car")
def order_car(m):
    uid = m.from_user.id
    orders[uid]["data"]["car"] = m.text.strip()
    orders[uid]["step"] = "budget"
    bot.send_message(uid, "üí∏ –Ø–∫–∏–π <b>–±—é–¥–∂–µ—Ç</b>? (–≥—Ä–Ω/‚Ç¨/$)")

@bot.message_handler(func=lambda m: orders.get(m.from_user.id, {}).get("step") == "budget")
def order_budget(m):
    uid = m.from_user.id
    orders[uid]["data"]["budget"] = m.text.strip()
    orders[uid]["step"] = "year"
    bot.send_message(uid, "üìÖ –Ø–∫–∏–π –±–∞–∂–∞–Ω–∏–π <b>—Ä—ñ–∫</b>? (–º–æ–∂–Ω–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω)")

@bot.message_handler(func=lambda m: orders.get(m.from_user.id, {}).get("step") == "year")
def order_year(m):
    uid = m.from_user.id
    orders[uid]["data"]["year"] = m.text.strip()
    orders[uid]["step"] = "name"
    bot.send_message(uid, "üë§ –Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å? <b>–Ü–º'—è</b>")

@bot.message_handler(func=lambda m: orders.get(m.from_user.id, {}).get("step") == "name")
def order_name(m):
    uid = m.from_user.id
    orders[uid]["data"]["name"] = m.text.strip()
    orders[uid]["step"] = "contact"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True))
    bot.send_message(uid, "üìû –î–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ @username", reply_markup=kb)

@bot.message_handler(content_types=["contact"])
def order_contact_share(m):
    uid = m.from_user.id
    if uid in orders and orders[uid].get("step") == "contact":
        phone = m.contact.phone_number
        orders[uid]["data"]["contact"] = phone
        finish_order(uid, m)

@bot.message_handler(func=lambda m: orders.get(m.from_user.id, {}).get("step") == "contact")
def order_contact_text(m):
    uid = m.from_user.id
    orders[uid]["data"]["contact"] = m.text.strip()
    finish_order(uid, m)

def finish_order(uid: int, m):
    data = orders[uid]["data"]
    text = order_summary(data)
    # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    if ADMIN_ID:
        bot.send_message(ADMIN_ID, text)
    # –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
    bot.send_message(uid, "‚úÖ –î—è–∫—É—é! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
                          f"–Ø–∫—â–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: <b>{PHONE_READABLE}</b>")
    orders.pop(uid, None)

# ===== –ü–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω) =====
@bot.message_handler(commands=["post"])
def post_cmd(m):
    if not is_admin(m.from_user.id):
        return bot.reply_to(m, "–ö–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è /post
    parts = m.text.split(" ", 1)
    caption = parts[1].strip() if len(parts) > 1 else "(–±–µ–∑ —Ç–µ–∫—Å—Ç—É)"

    # —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ñ–æ—Ç–æ/–¥–æ–∫ ‚Äî —à–ª–µ–º–æ –º–µ–¥—ñ–∞, —ñ–Ω–∞–∫—à–µ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—Å—Ç
    if m.reply_to_message and m.reply_to_message.photo:
        # –±–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
        file_id = m.reply_to_message.photo[-1].file_id
        bot.send_photo(CHANNEL_ID, file_id, caption=caption, reply_markup=channel_button_row())
    elif m.reply_to_message and (m.reply_to_message.document or m.reply_to_message.video):
        if m.reply_to_message.document:
            bot.send_document(CHANNEL_ID, m.reply_to_message.document.file_id,
                              caption=caption, reply_markup=channel_button_row())
        else:
            bot.send_video(CHANNEL_ID, m.reply_to_message.video.file_id,
                           caption=caption, reply_markup=channel_button_row())
    else:
        bot.send_message(CHANNEL_ID, caption, reply_markup=channel_button_row())

    bot.reply_to(m, "‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")

# ===== –°—Ç–∞—Ä—Ç –ø–æ–ª–ª—ñ–Ω–≥—É =====
if __name__ == "__main__":
    # –≤–∞–∂–ª–∏–≤–æ: logger_level –º–∞—î –±—É—Ç–∏ —Å–∞–º–µ —á–∏—Å–ª–æ–º
    logging.getLogger("telebot").setLevel(logging.INFO)
    bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=60)
