# -*- coding: utf-8 -*-
import os
import logging
from datetime import datetime
from telebot import TeleBot, types

# -------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
BOT_USERNAME = os.getenv("BOT_USERNAME", "").strip().lstrip("@")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "").strip()
CONTACT_CITY = os.getenv("CONTACT_CITY", "Ternopil")
INSTAGRAM_URL = os.getenv("INSTAGRAM_URL", "https://instagram.com/autohouse.te")
PHONE_E164 = os.getenv("PHONE_E164", "+380960670190")
PHONE_READABLE = os.getenv("PHONE_READABLE", "+38 096 067 01 90")

if not BOT_TOKEN:
    raise RuntimeError("ENV BOT_TOKEN is empty")

# –Ø–∫—â–æ –∫–∞–Ω–∞–ª –≤–≤–µ–ª–∏ –±–µ–∑ @ ‚Äî –¥–æ–¥–∞–º–æ
if CHANNEL_USERNAME and not CHANNEL_USERNAME.startswith("@"):
    CHANNEL_USERNAME = "@" + CHANNEL_USERNAME

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
log = logging.getLogger("bot")

bot = TeleBot(BOT_TOKEN, parse_mode="HTML")

# -------------------- –ü–∞–º'—è—Ç—å (–ø—Ä–æ—Å—Ç–µ FSM —É RAM) --------------------
# –£ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –∫—Ä–∞—â–µ Redis/DB, –∞–ª–µ –¥–ª—è Render Starter –ø—ñ–¥—ñ–π–¥–µ RAM
STATE = {}          # user_id -> "brand" | "budget" | "year" | "phone" | None
LEADS = {}          # user_id -> dict(brand, budget, year, phone)

def get_state(uid): return STATE.get(uid)
def set_state(uid, val): STATE[uid] = val
def clear_state(uid): STATE.pop(uid, None)

def lead_get(uid): return LEADS.setdefault(uid, {})
def lead_set(uid, key, val): LEADS.setdefault(uid, {})[key] = val
def lead_clear(uid): LEADS.pop(uid, None)

# -------------------- –¢–µ–∫—Å—Ç–∏ --------------------
WELCOME = (
    "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
    "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
    "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order."
)

HELP_TEXT = (
    "<b>–ö–æ–º–∞–Ω–¥–∏</b>:\n"
    "‚Ä¢ /start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
    "‚Ä¢ /order ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É\n"
    "‚Ä¢ /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n"
    "‚Ä¢ /post ‚Äî (–∞–¥–º—ñ–Ω) –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ/–æ–ø–∏—Å —É –∫–∞–Ω–∞–ª"
)

ASK_BRAND = "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?"
ASK_BUDGET = "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?"
ASK_YEAR = "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?"
ASK_PHONE = (
    "–ó–∞–ª–∏—à—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, "
    "—â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
)
ASK_PHONE_BUTTON = "üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º"

LEAD_SAVED_FOR_USER = (
    "‚úÖ –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!\n"
    "‚Ä¢ –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: <b>{brand}</b>\n"
    "‚Ä¢ –ë—é–¥–∂–µ—Ç: <b>{budget}$</b>\n"
    "‚Ä¢ –†—ñ–∫: <b>{year}</b>\n"
    "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n\n"
    "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏. –î—è–∫—É—î–º–æ!"
)

LEAD_FOR_ADMIN = (
    "üÜï <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
    "–ß–∞—Å: <code>{ts}</code>\n"
    "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <a href='tg://user?id={uid}'>{name}</a> (id: <code>{uid}</code>)\n\n"
    "‚Ä¢ –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: <b>{brand}</b>\n"
    "‚Ä¢ –ë—é–¥–∂–µ—Ç: <b>{budget}$</b>\n"
    "‚Ä¢ –†—ñ–∫: <b>{year}</b>\n"
    "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>"
)

CONTACTS_TEXT = (
    "üìç <b>{city}</b>\n"
    "üìû <b>{phone_pretty}</b>\n"
    "üîó Instagram: {insta}"
).format(city=CONTACT_CITY, phone_pretty=PHONE_READABLE, insta=INSTAGRAM_URL)

# -------------------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ --------------------
def main_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    kb.row("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
    return kb

def phone_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_phone = types.KeyboardButton(text=ASK_PHONE_BUTTON, request_contact=True)
    kb.add(btn_phone)
    return kb

def post_inline_kb() -> types.InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥ –ø–æ—Å—Ç–æ–º —É –∫–∞–Ω–∞–ª—ñ, –≤–µ–¥–µ –¥–æ –±–æ—Ç–∞
    url = f"https://t.me/{BOT_USERNAME}?start=from_post"
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", url=url))
    return ikb

# -------------------- –ö–æ–º–∞–Ω–¥–∏ --------------------
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    clear_state(message.from_user.id)
    lead_clear(message.from_user.id)
    bot.send_message(message.chat.id, WELCOME, reply_markup=main_kb())

@bot.message_handler(commands=["help"])
def cmd_help(message: types.Message):
    bot.send_message(message.chat.id, HELP_TEXT, reply_markup=main_kb())

@bot.message_handler(commands=["order"])
def cmd_order(message: types.Message):
    uid = message.from_user.id
    lead_clear(uid)
    set_state(uid, "brand")
    bot.send_message(message.chat.id, ASK_BRAND, reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def btn_help(message: types.Message):
    cmd_help(message)

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def btn_contacts(message: types.Message):
    bot.send_message(message.chat.id, CONTACTS_TEXT, disable_web_page_preview=True)

@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def btn_order(message: types.Message):
    cmd_order(message)

# -------------------- –ü—Ä–∏–π–æ–º –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ --------------------
@bot.message_handler(content_types=["contact"])
def on_contact(message: types.Message):
    uid = message.from_user.id
    phone = ""
    if message.contact and message.contact.phone_number:
        phone = message.contact.phone_number
    if phone:
        lead_set(uid, "phone", phone)
        finish_lead_if_ready(message)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞.")

# -------------------- –û—Å–Ω–æ–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è --------------------
@bot.message_handler(func=lambda m: get_state(m.from_user.id) in ("brand", "budget", "year", "phone"))
def lead_flow(message: types.Message):
    uid = message.from_user.id
    step = get_state(uid)

    if step == "brand":
        lead_set(uid, "brand", message.text.strip())
        set_state(uid, "budget")
        bot.send_message(message.chat.id, ASK_BUDGET)
        return

    if step == "budget":
        budget_text = message.text.strip()
        budget = "".join(ch for ch in budget_text if ch.isdigit())
        if not budget:
            bot.send_message(message.chat.id, "‚ùå –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –±—é–¥–∂–µ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        lead_set(uid, "budget", budget)
        set_state(uid, "year")
        bot.send_message(message.chat.id, ASK_YEAR)
        return

    if step == "year":
        year_text = message.text.strip()
        year = "".join(ch for ch in year_text if ch.isdigit())[:4]
        if not year or len(year) < 4:
            bot.send_message(message.chat.id, "‚ùå –í–∫–∞–∂—ñ—Ç—å —Ä—ñ–∫ —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä. 2018.")
            return
        lead_set(uid, "year", year)
        set_state(uid, "phone")
        bot.send_message(message.chat.id, ASK_PHONE, reply_markup=phone_kb())
        return

    if step == "phone":
        phone = message.text.strip()
        # –î–æ–∑–≤–æ–ª–∏–º–æ + —Ç–∞ —Ü–∏—Ñ—Ä–∏
        cleaned = "+" + "".join(ch for ch in phone if ch.isdigit())
        if len(cleaned) < 8:  # –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º–æ —â–µ —Ä–∞–∑
            bot.send_message(message.chat.id, "‚ùå –í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π
