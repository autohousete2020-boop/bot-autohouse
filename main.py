import os
import logging
from typing import Dict, Any, Optional

from telebot import TeleBot, types

# --------- –ö–æ–Ω—Ñ—ñ–≥ —ñ–∑ ENV ---------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0").strip() or 0)
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "").strip()  # –º–æ–∂–Ω–∞ –∑ @ –∞–±–æ –±–µ–∑
BOT_USERNAME = os.getenv("BOT_USERNAME", "").strip()          # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ AutoTernopil_bot
CONTACT_CITY = os.getenv("CONTACT_CITY", "Ternopil").strip()
INSTAGRAM_URL = os.getenv("INSTAGRAM_URL", "https://instagram.com/autohouse.te").strip()
PHONE_E164 = os.getenv("PHONE_E164", "+380960670190").strip()
PHONE_READABLE = os.getenv("PHONE_READABLE", "+38 096 067 01 90").strip()

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is empty. Set env BOT_TOKEN.")

# –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —ñ–º'—è –∫–∞–Ω–∞–ª—É (@ –¥–æ–¥–∞—î–º–æ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
if CHANNEL_USERNAME and not CHANNEL_USERNAME.startswith("@"):
    CHANNEL_USERNAME = "@" + CHANNEL_USERNAME

# –õ–æ–≥—É–≤–∞–Ω–Ω—è (–±–µ–∑ —Ä—è–¥–∫—ñ–≤ —Ä—ñ–≤–Ω—ñ–≤ ‚Äî —Ä–∞–Ω—ñ—à–µ —Ü–µ –¥–∞–≤–∞–ª–æ TypeError)
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

bot = TeleBot(BOT_TOKEN, parse_mode="HTML", threaded=True)

# --------- –ü—Ä–æ—Å—Ç—ñ "—Å—Ç–∞–Ω–∏" –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---------
USER_STATE: Dict[int, Dict[str, Any]] = {}

# --------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---------
def main_menu_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        types.KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
        types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"),
        types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"),
    )
    return kb

def share_phone_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    return kb

def inline_order_button() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    # Deep-link –¥–ª—è —Å—Ç–∞—Ä—Ç—É –±–æ—Ç–∞ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "order"
    if BOT_USERNAME:
        url = f"https://t.me/{BOT_USERNAME}?start=order"
    else:
        # –§–æ–ª–±–µ–∫: –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –±–æ—Ç
        url = "https://t.me/"
    kb.add(types.InlineKeyboardButton("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", url=url))
    return kb

# --------- –¢–µ–∫—Å—Ç–∏ (–∑–∞–ª–∏—à–∏–≤ –ø–æ —Å—É—Ç—ñ —è–∫ –±—É–ª–∏, –ª–∏—à–µ –∞–∫—É—Ä–∞—Ç–Ω–æ –æ—Ñ–æ—Ä–º–∏–≤) ---------
WELCOME_TEXT = (
    "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
    "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
    "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order."
)

HELP_TEXT = (
    "–Ø –º–æ–∂—É:\n"
    "‚Ä¢ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order\n"
    "‚Ä¢ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ç–≤—ñ–π –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª—ñ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ‚Äî –∫–æ–º–∞–Ω–¥–∞ /post\n\n"
    "–ü–æ—Å—Ç–∞–≤ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –¥–æ–ø–æ–º–æ–∂—É üôÇ"
)

CONTACTS_TEXT = (
    f"–¢–µ–ª–µ—Ñ–æ–Ω: <b>{PHONE_READABLE}</b>\n"
    f"–ú—ñ—Å—Ç–æ: <b>{CONTACT_CITY}</b>\n"
    f"Instagram: <a href=\"{INSTAGRAM_URL}\">{INSTAGRAM_URL}</a>"
)

ADMIN_POST_HINT = (
    "–ù–∞–¥—ñ—à–ª–∏ <b>—Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º</b> ‚Äî –æ–ø—É–±–ª—ñ–∫—É—é –≤ –∫–∞–Ω–∞–ª—ñ —Ç–∞ –¥–æ–¥–∞–º –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É¬ª.\n"
    "–ê–±–æ –Ω–∞–¥—ñ—à–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç ‚Äî –æ–ø—É–±–ª—ñ–∫—É—é —è–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç.\n\n"
    "–ö–∞–Ω–∞–ª: <b>{channel}</b>"
)

ASK_BRAND = "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?"
ASK_BUDGET = "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?"
ASK_YEAR = "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?"
ASK_PHONE = (
    "–ó–∞–ª–∏—à —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø–∏—Å–æ–º) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
)

LEAD_OK_TMPL = (
    "‚úÖ –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!\n"
    "‚Ä¢ –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: <b>{brand}</b>\n"
    "‚Ä¢ –ë—é–¥–∂–µ—Ç: <b>{budget}$</b>\n"
    "‚Ä¢ –†—ñ–∫: <b>{year}</b>\n"
    "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n\n"
    "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—å —ñ–∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
)

ADMIN_LEAD_TMPL = (
    "üîî <b>–ù–æ–≤–∏–π –ª—ñ–¥</b>\n"
    "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {name} (@{username}, id={uid})\n"
    "–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: {brand}\n"
    "–ë—é–¥–∂–µ—Ç: {budget}$\n"
    "–†—ñ–∫: {year}\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
)

# --------- –•–µ–ª–ø–µ—Ä–∏ —Å—Ç–∞–Ω—ñ–≤ ---------
def reset_state(user_id: int) -> None:
    USER_STATE[user_id] = {"step": None, "data": {}}

def set_step(user_id: int, step: str) -> None:
    state = USER_STATE.setdefault(user_id, {"step": None, "data": {}})
    state["step"] = step

def get_step(user_id: int) -> Optional[str]:
    return USER_STATE.get(user_id, {}).get("step")

def save_answer(user_id: int, key: str, value: Any) -> None:
    state = USER_STATE.setdefault(user_id, {"step": None, "data": {}})
    state["data"][key] = value

def get_data(user_id: int) -> Dict[str, Any]:
    return USER_STATE.get(user_id, {}).get("data", {})

# --------- –ö–æ–º–∞–Ω–¥–∏ ---------
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    # deep-link ?start=order
    if message.text and message.text.strip().startswith("/start") and "order" in message.text:
        reset_state(message.from_user.id)
        set_step(message.from_user.id, "brand")
        bot.send_message(message.chat.id, ASK_BRAND, reply_markup=types.ReplyKeyboardRemove())
        return

    bot.send_message(message.chat.id, WELCOME_TEXT, reply_markup=main_menu_kb())

@bot.message_handler(commands=["help"])
def cmd_help(message: types.Message):
    bot.send_message(message.chat.id, HELP_TEXT, reply_markup=main_menu_kb())

@bot.message_handler(commands=["order"])
def cmd_order(message: types.Message):
    reset_state(message.from_user.id)
    set_step(message.from_user.id, "brand")
    bot.send_message(message.chat.id, ASK_BRAND, reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=["post"])
def cmd_post(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        bot.reply_to(message, "–¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    text = ADMIN_POST_HINT.format(channel=CHANNEL_USERNAME or "(–Ω–µ –∑–∞–¥–∞–Ω–æ)")
    bot.reply_to(message, text)

# --------- –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ---------
@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def menu_order(message: types.Message):
    cmd_order(message)

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def menu_contacts(message: types.Message):
    bot.send_message(message.chat.id, CONTACTS_TEXT, disable_web_page_preview=True)

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def menu_help(message: types.Message):
    cmd_help(message)

# --------- –ü—Ä–∏–π–æ–º –ª—ñ–¥–∞ ---------
@bot.message_handler(content_types=["contact"])
def on_contact(message: types.Message):
    # –∫–æ–Ω—Ç–∞–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    phone = message.contact.phone_number if message.contact else ""
    save_answer(message.from_user.id, "phone", phone or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
    finish_lead_if_ready(message)

@bot.message_handler(func=lambda m: get_step(m.from_user.id) in {"brand", "budget", "year", "phone"} and m.content_type == "text")
def lead_flow(message: types.Message):
    uid = message.from_user.id
    step = get_step(uid)

    if step == "brand":
        save_answer(uid, "brand", message.text.strip())
        set_step(uid, "budget")
        bot.send_message(message.chat.id, ASK_BUDGET)
        return

    if step == "budget":
        budget = "".join(ch for ch in message.text if ch.isdigit())
        if not budget:
