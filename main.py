# main.py
import os
import logging
from typing import Dict, Any

import telebot
from telebot import types

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# ---------- –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("ENV BOT_TOKEN is empty!")

# –ú–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ –∑ ENV. –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äì –±–µ—Ä–µ–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ.
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "771906613"))
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "@autohouse_te").strip()  # –≤–∞—à –ø—É–±–ª—ñ—á–Ω–∏–π –∫–∞–Ω–∞–ª @xxxxx

# –¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω—ñ—ó (–¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ö–æ–Ω—Ç–∞–∫—Ç–∏¬ª —Ç–∞ —Ç–µ–∫—Å—Ç—ñ–≤)
BUSINESS_PHONE = "+38 096 067 01 90"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–∏—Ö —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ –ë–î)
user_states: Dict[int, Dict[str, Any]] = {}

# –Ü–º–µ–Ω–∞ –∫—Ä–æ–∫—ñ–≤ –∞–Ω–∫–µ—Ç–∏
STEP_BRAND = "brand"
STEP_BUDGET = "budget"
STEP_YEAR = "year"
STEP_CONTACT = "contact"
STEP_DONE = "done"

# –û—Ç—Ä–∏–º–∞—î–º–æ @username –±–æ—Ç–∞ –¥–ª—è deep-link
_me = bot.get_me()
BOT_USERNAME = _me.username  # –±–µ–∑ @


# ---------- –ö–æ—Ä–∏—Å–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ----------
def main_menu_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    kb.row(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return kb


def contact_request_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É"))
    return kb


def channel_cta_inline_kb() -> types.InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∞ –≤–µ–¥–µ —É –±–æ—Ç —ñ–∑ deep-link –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start=order (–≤—ñ–¥–∫—Ä–∏—î –∞–Ω–∫–µ—Ç—É)
    url = f"https://t.me/{BOT_USERNAME}?start=order"
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", url=url))
    return ikb


# ---------- –î–æ–ø–æ–º—ñ–∂–Ω–µ ----------
def start_order(chat_id: int):
    user_states[chat_id] = {"step": STEP_BRAND}
    bot.send_message(chat_id, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=types.ReplyKeyboardRemove())


def send_order_to_admin(order: Dict[str, Any], user: types.User):
    text = (
        "üÜï <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
        f"üë§ –í—ñ–¥: <a href=\"tg://user?id={user.id}\">{user.first_name or ''} {user.last_name or ''}</a> @{user.username or ''}\n\n"
        f"‚Ä¢ –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: <b>{order.get('brand','-')}</b>\n"
        f"‚Ä¢ –ë—é–¥–∂–µ—Ç: <b>{order.get('budget','-')}</b>\n"
        f"‚Ä¢ –†—ñ–∫: <b>{order.get('year','-')}</b>\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞: <b>{order.get('contact','–Ω–µ –Ω–∞–¥–∞–Ω–æ')}</b>"
    )
    bot.send_message(ADMIN_CHAT_ID, text)


# ---------- –ö–æ–º–∞–Ω–¥–∏ ----------
@bot.message_handler(commands=["start"])
def cmd_start(m: types.Message):
    # Deep-link: /start order -> –æ–¥—Ä–∞–∑—É –∞–Ω–∫–µ—Ç–∞
    if m.text and len(m.text.split()) > 1 and m.text.split()[1].lower() == "order":
        bot.send_message(
            m.chat.id,
            "–ü—Ä–∏–≤—ñ—Ç! üëã –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ.\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å.",
            reply_markup=main_menu_kb(),
        )
        start_order(m.chat.id)
        return

    bot.send_message(
        m.chat.id,
        (
            "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
            "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
            "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order."
        ),
        reply_markup=main_menu_kb(),
    )


@bot.message_handler(commands=["help"])
def cmd_help(m: types.Message):
    bot.send_message(
        m.chat.id,
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /start ‚Äì –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "‚Ä¢ /order ‚Äì –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ\n"
        "‚Ä¢ /post ‚Äì (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω) –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª—ñ –∑ –∫–Ω–æ–ø–∫–æ—é ¬´–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É¬ª",
        reply_markup=main_menu_kb(),
    )


@bot.message_handler(commands=["order"])
def cmd_order(m: types.Message):
    bot.send_message(m.chat.id, "–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É. –¶–µ –∑–∞–π–º–µ 1‚Äì2 —Ö–≤–∏–ª–∏–Ω–∏.")
    start_order(m.chat.id)


# ---------- –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ ----------
@bot.message_handler(func=lambda msg: msg.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def menu_order(m: types.Message):
    start_order(m.chat.id)


@bot.message_handler(func=lambda msg: msg.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def menu_contacts(m: types.Message):
    bot.send_message(
        m.chat.id,
        f"–ú–∏ –Ω–∞ –∑–≤'—è–∑–∫—É:\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{BUSINESS_PHONE}</b>\n‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}",
        reply_markup=main_menu_kb(),
    )


@bot.message_handler(func=lambda msg: msg.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def menu_help(m: types.Message):
    cmd_help(m)


# ---------- –ê–Ω–∫–µ—Ç–∞ (–ø—Ä–æ—Å—Ç–∞ FSM –±–µ–∑ –ë–î) ----------
@bot.message_handler(content_types=["text", "contact"])
def questionnaire(m: types.Message):
    st = user_states.get(m.chat.id)

    # —è–∫—â–æ –Ω–µ –≤ –∞–Ω–∫–µ—Ç—ñ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
    if not st or st.get("step") is None:
        return

    step = st["step"]

    # 1) –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å
    if step == STEP_BRAND:
        st["brand"] = m.text.strip()
        st["step"] = STEP_BUDGET
        bot.send_message(m.chat.id, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?")
        return

    # 2) –ë—é–¥–∂–µ—Ç
    if step == STEP_BUDGET:
        st["budget"] = m.text.strip()
        st["step"] = STEP_YEAR
        bot.send_message(m.chat.id, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")
        return

    # 3) –†—ñ–∫
    if step == STEP_YEAR:
        st["year"] = m.text.strip()
        st["step"] = STEP_CONTACT
        bot.send_message(
            m.chat.id,
            "–ó–∞–ª–∏—à—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –±—É–¥—å –ª–∞—Å–∫–∞.",
            reply_markup=contact_request_kb(),
        )
        return

    # 4) –ö–æ–Ω—Ç–∞–∫—Ç (—á–µ—Ä–µ–∑ share contact –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º)
    if step == STEP_CONTACT:
        phone = None
        if m.content_type == "contact" and m.contact and m.contact.phone_number:
            phone = m.contact.phone_number
        else:
            # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É¬ª ‚Äì –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ—Ä–µ–º–æ —è–∫ —Ç–µ–ª–µ—Ñ–æ–Ω
            phone = (m.text or "").strip()

        st["contact"] = phone if phone else "–Ω–µ –Ω–∞–¥–∞–Ω–æ"
        st["step"] = STEP_DONE

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
        bot.send_message(
            m.chat.id,
            (
                "‚úÖ <b>–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n"
                f"‚Ä¢ –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: <b>{st.get('brand')}</b>\n"
                f"‚Ä¢ –ë—é–¥–∂–µ—Ç: <b>{st.get('budget')}</b>\n"
                f"‚Ä¢ –†—ñ–∫: <b>{st.get('year')}</b>\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{st.get('contact')}</b>\n\n"
                "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. –î—è–∫—É—î–º–æ! üôå"
            ),
            reply_markup=main_menu_kb(),
        )

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
        send_order_to_admin(st, m.from_user)

        # –û—á–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω
        user_states.pop(m.chat.id, None)
        return


# ---------- –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ —É –∫–∞–Ω–∞–ª (–¥–ª—è –∞–¥–º—ñ–Ω–∞) ----------
@bot.message_handler(commands=["post"])
def cmd_post(m: types.Message):
    if m.chat.id != ADMIN_CHAT_ID:
        bot.reply_to(m, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
