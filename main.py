# -*- coding: utf-8 -*-
import os
import re
import logging
from typing import Dict, Any

import telebot
from telebot import types

# --------------------------
# –õ–æ–≥—É–≤–∞–Ω–Ω—è
# --------------------------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=getattr(logging, LOG_LEVEL, logging.INFO),
)
logger = logging.getLogger(__name__)

# --------------------------
# –ö–æ–Ω—Ñ—ñ–≥ –∑ Environment
# --------------------------
def env(name: str, default: str = "") -> str:
    v = os.getenv(name, default if default is not None else "")
    return v.strip() if isinstance(v, str) else v

BOT_TOKEN = env("BOT_TOKEN")
ADMIN_CHAT_ID_STR = env("ADMIN_CHAT_ID")
BOT_USERNAME = env("BOT_USERNAME")  # –±–µ–∑ @
CHANNEL_USERNAME = env("CHANNEL_USERNAME")  # –∑ @
INSTAGRAM_URL = env("INSTAGRAM_URL", "https://instagram.com/")
CONTACT_CITY = env("CONTACT_CITY", "")
PHONE_E164 = env("PHONE_E164", "")
PHONE_READABLE = env("PHONE_READABLE", "")

if not BOT_TOKEN:
    logger.error("BOT_TOKEN is not set")
    raise SystemExit(1)

try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID_STR)
except Exception:
    logger.error("ADMIN_CHAT_ID must be integer; got: %r", ADMIN_CHAT_ID_STR)
    raise SystemExit(1)

if not BOT_USERNAME:
    logger.error("BOT_USERNAME is not set (e.g. AutoTernopil_bot)")
    raise SystemExit(1)

if not CHANNEL_USERNAME.startswith("@"):
    logger.error("CHANNEL_USERNAME must start with @ (e.g. @autohouse_te)")
    raise SystemExit(1)

# --------------------------
# –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
# --------------------------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML", use_class_middlewares=False)

# –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ ‚Äî –ø—Ä–∏–±–∏—Ä–∞—î–º–æ webhook, —â–æ–± –Ω–µ –±—É–ª–æ 409
try:
    bot.remove_webhook()
except Exception as e:
    logger.warning("remove_webhook warning: %s", e)

# --------------------------
# –ü—Ä–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç–∏ (—â–æ–± –Ω–µ –ª–∞–º–∞–ª–∏—Å—è –ª–∞–ø–∫–∏)
# --------------------------
WELCOME_TEXT = (
    "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
    "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
    "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order."
)

HELP_TEXT = (
    "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
    "1) –¢–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª.\n"
    "2) –í–∫–∞–∂–∏ –º–∞—Ä–∫—É/–º–æ–¥–µ–ª—å, –±—é–¥–∂–µ—Ç —ñ –±–∞–∂–∞–Ω–∏–π —Ä—ñ–∫.\n"
    "3) –ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä (–∫–Ω–æ–ø–∫–æ—é –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º).\n"
    "–ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
)

CONTACTS_TEXT = (
    "–ó–≤‚Äô—è–∑–æ–∫:\n"
    f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{PHONE_READABLE}</b>\n"
    f"‚Ä¢ Instagram: {INSTAGRAM_URL}\n"
    f"‚Ä¢ –ú—ñ—Å—Ç–æ: {CONTACT_CITY}"
)

# --------------------------
# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø—Ä–æ—Å—Ç–∏–π FSM —É –ø–∞–º'—è—Ç—ñ)
# --------------------------
user_state: Dict[int, Dict[str, Any]] = {}

def reset_state(uid: int):
    user_state[uid] = {"step": None, "brand": None, "budget": None, "year": None, "phone": None}

reset_kb = types.ReplyKeyboardRemove()

def main_menu_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    kb.add(types.KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    kb.add(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return kb

def share_phone_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üì≤ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
    kb.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def order_button_inline() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    deep_link = f"https://t.me/{BOT_USERNAME}?start=order"
    kb.add(types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url=deep_link))
    return kb

# --------------------------
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É (—è–∫—â–æ —Ç–µ–∫—Å—Ç–æ–º)
# --------------------------
PHONE_RE = re.compile(r"^\+?\d[\d\-\s]{7,}$")

def normalize_phone(text: str) -> str:
    t = text.strip()
    # –¥–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –∑ + —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏/–¥–µ—Ñ—ñ—Å–∏
    if PHONE_RE.match(t):
        return t
    return ""

# --------------------------
# –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥/–∫–Ω–æ–ø–æ–∫
# --------------------------
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    uid = message.from_user.id
    reset_state(uid)

    # deep-link –ø–∞—Ä–∞–º–µ—Ç—Ä
    arg = ""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) == 2:
            arg = parts[1].strip()
    except Exception:
        pass

    if arg.lower().startswith("order"):
        # –æ–¥—Ä–∞–∑—É —É —Ñ–æ—Ä–º—É
        user_state[uid]["step"] = "brand"
        bot.send_message(uid, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=reset_kb)
        return

    bot.send_message(uid, WELCOME_TEXT, reply_markup=main_menu_kb())

@bot.message_handler(commands=["help"])
def cmd_help(message: types.Message):
    bot.send_message(message.chat.id, HELP_TEXT, reply_markup=main_menu_kb())

@bot.message_handler(commands=["order"])
def cmd_order(message: types.Message):
    uid = message.from_user.id
    reset_state(uid)
    user_state[uid]["step"] = "brand"
    bot.send_message(uid, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=reset_kb)

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def btn_help(message: types.Message):
    bot.send_message(message.chat.id, HELP_TEXT, reply_markup=main_menu_kb())

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def btn_contacts(message: types.Message):
    bot.send_message(message.chat.id, CONTACTS_TEXT, reply_markup=main_menu_kb())

@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def btn_order(message: types.Message):
    uid = message.from_user.id
    reset_state(uid)
    user_state[uid]["step"] = "brand"
    bot.send_message(uid, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=reset_kb)

# --------------------------
# –î—ñ–∞–ª–æ–≥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
# --------------------------
@bot.message_handler(content_types=["contact"])
def on_contact(message: types.Message):
    uid = message.from_user.id
    if uid not in user_state or user_state[uid].get("step") != "phone":
        return
    phone = message.contact.phone_number
    user_state[uid]["phone"] = phone
    finish_order(uid, message)

@bot.message_handler(func=lambda m: True, content_types=["text"])
def on_text(message: types.Message):
    uid = message.from_user.id
    text = (message.text or "").strip()

    # –ù–∞–∑–∞–¥ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        bot.send_message(uid, "–°–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω—É–≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
        reset_state(uid)
        return

    st = user_state.get(uid)
    if not st or not st.get("step"):
        # –ø–æ–∑–∞ –¥—ñ–∞–ª–æ–≥–æ–º
        return

    step = st["step"]

    if step == "brand":
        st["brand"] = text
        st["step"] = "budget"
        bot.send_message(uid, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?")
        return

    if step == "budget":
        st["budget"] = text
        st["step"] = "year"
        bot.send_message(uid, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")
        return

    if step == "year":
        st["year"] = text
        st["step"] = "phone"
        bot.send_message(
            uid,
            "–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
