import os
import logging
from telebot import TeleBot, types

# ============ CONFIG ============
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")

# –ê–¥–º—ñ–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ (—Ç–≤—ñ–π ID)
try:
    ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "771906613"))
except ValueError:
    ADMIN_CHAT_ID = 771906613

# –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π (/post). –ú–æ–∂–µ –±—É—Ç–∏ '@username' –∞–±–æ -100XXXXXXXXXX
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "").strip()  # optional

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("autohouse")

# ===============================

bot = TeleBot(BOT_TOKEN, parse_mode="HTML")
user_state = {}  # chat_id -> dict

# ---------- helpers ----------
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    kb.row(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return kb

def clear_state(chat_id):
    user_state.pop(chat_id, None)

def ask_car(chat_id):
    bot.send_message(chat_id, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=types.ReplyKeyboardRemove())
    # –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –±—é–¥–∂–µ—Ç –±—É–¥–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É handler —Ç–µ–∫—Å—Ç—É

def deep_link_button():
    # –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É¬ª –ø—ñ–¥ –ø–æ—Å—Ç–æ–º —É –∫–∞–Ω–∞–ª—ñ
    try:
        username = bot.get_me().username
    except Exception:
        username = ""
    url = f"https://t.me/{username}?start=order" if username else "https://t.me/"
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", url=url))
    return ikb

# ---------- start / menu ----------
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    # deep-link ?start=order -> –æ–¥—Ä–∞–∑—É –∞–Ω–∫–µ—Ç–∞
    arg = message.text.split(maxsplit=1)
    if len(arg) > 0 and " " in message.text:
        # —Å—Ç–∞—Ä—ñ –∫–ª—ñ—î–Ω—Ç–∏ Telegram –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª
        pass
    # —á–µ—Ä–µ–∑ /start startparam —É –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:
    # message.text –≤–∏–≥–ª—è–¥–∞—î —è–∫ "/start order"
    parts = message.text.split(maxsplit=1)
    if len(parts) == 2 and parts[1].strip().lower() == "order":
        start_order(message)
        return

    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
        "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª."
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def on_help(message: types.Message):
    text = (
        "–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –ø—ñ–¥–±–æ—Ä–æ–º –∞–≤—Ç–æ –ø—ñ–¥ –∫–ª—é—á: –°–®–ê üá∫üá∏ / –Ñ–≤—Ä–æ–ø–∞ üá™üá∫ ‚Üí –£–∫—Ä–∞—ó–Ω–∞ üá∫üá¶\n"
        "–ü–æ—á–Ω–∏ –∑ –∫–Ω–æ–ø–∫–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å, —ñ —è –∑–≤‚Äô—è–∂—É—Å—å."
    )
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def on_contacts(message: types.Message):
    text = (
        "üìû <b>–ê–≤—Ç–æ –∑ –°–®–ê —Ç–∞ –Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á</b>\n"
        "‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ + –º–∏—Ç–Ω–∏—Ü—è + —Ä–µ–º–æ–Ω—Ç\n"
        "‚Ä¢ –ï–∫–æ–Ω–æ–º—ñ—è –≤—ñ–¥ 20%\n\n"
        "–ó–≤'—è–∑–æ–∫: +38 096 067 01 90\n"
        "Instagram: https://instagram.com/autohouse.te"
    )
    bot.send_message(message.chat.id, text, disable_web_page_preview=True)

# ---------- order flow ----------
@bot.message_handler(commands=["order"])
def start_order(message: types.Message):
    chat_id = message.chat.id
    clear_state(chat_id)
    user_state[chat_id] = {}
    ask_car(chat_id)

@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def order_btn(message: types.Message):
    start_order(message)

@bot.message_handler(func=lambda m: m.chat.id in user_state and "car" not in user_state[m.chat.id])
def step_car(message: types.Message):
    chat_id = message.chat.id
    user_state[chat_id]["car"] = message.text.strip()
    bot.send_message(chat_id, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?")
    # –î–∞–ª—ñ —á–µ–∫–∞—î–º–æ –±—é–¥–∂–µ—Ç

@bot.message_handler(func=lambda m: m.chat.id in user_state and "budget" not in user_state[m.chat.id] and "car" in user_state[m.chat.id])
def step_budget(message: types.Message):
    chat_id = message.chat.id
    user_state[chat_id]["budget"] = message.text.strip()
    bot.send_message(chat_id, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")
    # –î–∞–ª—ñ —á–µ–∫–∞—î–º–æ —Ä—ñ–∫

@bot.message_handler(func=lambda m: m.chat.id in user_state and "year" not in user_state[m.chat.id] and "budget" in user_state[m.chat.id])
def step_year(message: types.Message):
    chat_id = message.chat.id
    user_state[chat_id]["year"] = message.text.strip()

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üì± –ù–∞–¥–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä", request_contact=True))
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ ‚¨áÔ∏è", reply_markup=kb)
    # –î–∞–ª—ñ —á–µ–∫–∞—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω

@bot.message_handler(content_types=["contact"])
def got_contact(message: types.Message):
    # –Ø–∫—â–æ —é–∑–µ—Ä –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–¥–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä¬ª
    chat_id = message.chat.id
    if chat_id not in user_state:
        return
    phone = message.contact.phone_number
    finish_order_with_phone(chat_id, phone)

@bot.message_handler(func=lambda m: m.chat.id in user_state and "phone" not in user_state[m.chat.id] and m.content_type == "text")
def step_phone_text(message: types.Message):
    # –Ø–∫—â–æ —é–∑–µ—Ä –≤–≤—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–µ–∫—Å—Ç–æ–º
    chat_id = message.chat.id
    phone = message.text.strip()
    finish_order_with_phone(chat_id, phone)

def finish_order_with_phone(chat_id: int, phone: str):
    user_state[chat_id]["phone"] = phone
    data = user_state[chat_id]

    summary = (
        "‚úÖ <b>–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        f"‚Ä¢ <b>–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:</b> {data.get('car','‚Äî')}\n"
        f"‚Ä¢ <b>–ë—é–¥–∂–µ—Ç:</b> {data.get('budget','‚Äî')}$\n"
        f"‚Ä¢ <b>–†—ñ–∫:</b> {data.get('year','‚Äî')}\n"
        f"‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone','‚Äî')}\n\n"
        "–ú–∏ –∑ –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ–º–æ—Å—å!"
    )
    bot.send_message(chat_id, summary, reply_markup=main_menu())

    admin_text = (
        "üîî <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n\n"
        f"–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: {data.get('car','‚Äî')}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget','‚Äî')}$\n"
        f"–†—ñ–∫: {data.get('year','‚Äî')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞: {data.get('phone','‚Äî')}"
    )
    try:
        bot.send_message(ADMIN_CHAT_ID, admin_text)
    except Exception as e:
        log.error(f"Can't send to admin: {e}")

    clear_state(chat_id)

# ---------- posting to channel (optional) ----------
@bot.message_handler(commands=["post"])
def cmd_post(message: types.Message):
    """
    –ü—Ä–æ—Å—Ç–∏–π —Ä–µ–∂–∏–º –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª:
    - –¥–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É (ADMIN_CHAT_ID)
    - –ø–æ–ø—Ä–æ—Å–∏–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –∞–±–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    - –æ–ø—É–±–ª—ñ–∫—É—î–º–æ –≤ CHANNEL_USERNAME (—è–∫—â–æ –∑–∞–¥–∞–Ω–æ), –¥–æ–¥–∞–º–æ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É¬ª
    """
    if message.chat.id != ADMIN_CHAT_ID:
        bot.reply_to(message, "–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É.")
        return

    if not CHANNEL_USERNAME:
        bot.reply_to(message, "–ù–µ –∑–∞–¥–∞–Ω–æ CHANNEL_USERNAME –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return

    bot.reply_to(message, "–ù–∞–¥—ñ—à–ª–∏ <b>—Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º</b> –∞–±–æ –ø—Ä
