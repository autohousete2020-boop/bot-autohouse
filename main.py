import os
import re
import time
import logging
import telebot
from telebot import types

# -------- Logging --------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# -------- Env --------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0") or "0")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "").strip()  # @public_channel
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()              # numeric for private

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is empty")
if not ADMIN_CHAT_ID:
    raise RuntimeError("ADMIN_CHAT_ID is empty")

def channel_target():
    return CHANNEL_ID if CHANNEL_ID else CHANNEL_USERNAME

# -------- Bot --------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
BOT_USERNAME = None

# -------- State --------
user_state = {}   # chat_id -> step
order_data = {}   # chat_id -> dict
PHONE_RE = re.compile(r"^\+?\d[\d\s\-\(\)]{7,}$")

# -------- Helpers --------
def mm():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    kb.add(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return kb

def ask_make(cid):
    user_state[cid] = "make"
    bot.send_message(cid, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?")

def ask_budget(cid):
    user_state[cid] = "budget"
    bot.send_message(cid, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?")

def ask_year(cid):
    user_state[cid] = "year"
    bot.send_message(cid, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")

def ask_phone(cid):
    user_state[cid] = "phone"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True))
    bot.send_message(cid, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ.", reply_markup=kb)

def clear(cid):
    user_state.pop(cid, None)
    order_data.pop(cid, None)

def lead_card(d):
    return (
        "‚úÖ <b>–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        f"‚Ä¢ <b>–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:</b> {telebot.util.escape(d.get('make',''))}\n"
        f"‚Ä¢ <b>–ë—é–¥–∂–µ—Ç:</b> {telebot.util.escape(str(d.get('budget','')))}$\n"
        f"‚Ä¢ <b>–†—ñ–∫:</b> {telebot.util.escape(str(d.get('year','')))}\n"
        f"‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞:</b> {telebot.util.escape(d.get('phone','‚Äî'))}"
    )

def admin_lead(user, d):
    name = telebot.util.escape(f"{user.first_name or ''} {user.last_name or ''}".strip()) or "‚Äî"
    uname = f"@{user.username}" if getattr(user, "username", None) else "‚Äî"
    return (
        "üì• <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> {name} ({uname}), id: <code>{user.id}</code>\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {telebot.util.escape(d.get('phone','‚Äî'))}\n"
        f"üöó <b>–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:</b> {telebot.util.escape(d.get('make',''))}\n"
        f"üíµ <b>–ë—é–¥–∂–µ—Ç:</b> {telebot.util.escape(str(d.get('budget','')))}$\n"
        f"üìÖ <b>–†—ñ–∫:</b> {telebot.util.escape(str(d.get('year','')))}"
    )

def post_kb():
    target = f"https://t.me/{BOT_USERNAME}?start=lead" if BOT_USERNAME else "https://t.me/"
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", url=target))
    return ikb

# -------- Handlers (–∑ try/except, —â–æ–± –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∞–ª–∏–ª–æ —Å–µ—Ä–≤—ñ—Å) --------
@bot.message_handler(commands=["start"])
def h_start(m):
    try:
        global BOT_USERNAME
        if BOT_USERNAME is None:
            BOT_USERNAME = bot.get_me().username
        text = (
            "<b>–ü—Ä–∏–≤—ñ—Ç!</b> –¶–µ –±–æ—Ç AutoHouse.\n"
            "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
            "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order."
        )
        bot.send_message(m.chat.id, text, reply_markup=mm())
        if m.text and " " in m.text:
            _, p = m.text.split(" ", 1)
            if p.strip().lower().startswith("lead"):
                ask_make(m.chat.id)
    except Exception as e:
        logging.exception("start: %s", e)

@bot.message_handler(commands=["order"])
def h_order(m):
    try:
        order_data[m.chat.id] = {}
        ask_make(m.chat.id)
    except Exception as e:
        logging.exception("order: %s", e)

@bot.message_handler(func=lambda x: x.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def h_btn_order(m):
    h_order(m)

@bot.message_handler(commands=["help"])
def h_help(m):
    try:
        bot.send_message(m.chat.id, "–ö–æ–º–∞–Ω–¥–∏: /start, /order, /post (–¥–ª—è –∞–¥–º—ñ–Ω–∞).", reply_markup=mm())
    except Exception as e:
        logging.exception("help: %s", e)

@bot.message_handler(func=lambda x: x.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def h_btn_help(m):
    h_help(m)

@bot.message_handler(commands=["contacts","contact"])
def h_contacts(m):
    try:
        bot.send_message(
            m.chat.id,
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>+38 096 067 01 90</b>\n"
            "Instagram: <a href='https://instagram.com/autohouse.te'>@autohouse.te</a>\n"
            "–ê–¥—Ä–µ—Å–∞: –¢–µ—Ä–Ω–æ–ø—ñ–ª—å",
            disable_web_page_preview=True
        )
    except Exception as e:
        logging.exception("contacts: %s", e)

@bot.message_handler(func=lambda x: x.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def h_btn_contacts(m):
    h_contacts(m)

@bot.message_handler(content_types=["contact"])
def h_contact(m):
    try:
        if user_state.get(m.chat.id) != "phone":
            return
        order_data.setdefault(m.chat.id, {})["phone"] = m.contact.phone_number
        finalize(m)
    except Exception as e:
        logging.exception("contact: %s", e)

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) in {"make","budget","year","phone"}, content_types=["text"])
def h_form(m):
    try:
        cid = m.chat.id
        st = user_state.get(cid)
        if st == "make":
            order_data.setdefault(cid, {})["make"] = m.text.strip()
            ask_budget(cid)
        elif st == "budget":
            order_data.setdefault(cid, {})["budget"] = re.sub(r"[^\d]", "", m.text) or m.text.strip()
            ask_year(cid)
        elif st == "year":
            order_data.setdefault(cid, {})["year"] = re.sub(r"[^\d]", "", m.text) or m.text.strip()
            ask_phone(cid)
        elif st == "phone":
            if not PHONE_RE.match(m.text.strip()):
                bot.send_message(cid, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX.")
                return
            order_data.setdefault(cid, {})["phone"] = m.text.strip()
            finalize(m)
    except Exception as e:
        logging.exception("form: %s", e)

def finalize(m):
    try:
        cid = m.chat.id
        d = order_data.get(cid, {})
        bot.send_message(cid, lead_card(d), reply_markup=mm())
        try:
            bot.send_message(ADMIN_CHAT_ID, admin_lead(m.from_user, d))
        except Exception as ex:
            logging.exception("send to admin: %s", ex)
        clear(cid)
    except Exception as e:
        logging.exception("finalize: %s", e)

@bot.message_handler(commands=["post"])
def h_post_hint(m):
    try:
        if m.from_user.id != ADMIN_CHAT_ID:
            return
        bot.reply_to(m, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>—Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º</b> ‚Äî –æ–ø—É–±–ª—ñ–∫—É—é –≤ –∫–∞–Ω–∞–ª—ñ –∑ –∫–Ω–æ–ø–∫
