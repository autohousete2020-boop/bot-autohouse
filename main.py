import os
import telebot
from telebot import types

# --- –ö–æ–Ω—Ñ—ñ–≥ –∑ –æ—Ç–æ—á–µ–Ω–Ω—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@autohouse_te")   # –¥–ª—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –º–æ–∂–Ω–∞ @username
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "").strip()

# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ADMIN_CHAT_ID —É int, —è–∫—â–æ –∑–∞–¥–∞–Ω–∏–π
ADMIN_CHAT_ID = int(ADMIN_CHAT_ID) if ADMIN_CHAT_ID.isdigit() else None

if not BOT_TOKEN:
    raise RuntimeError("Env BOT_TOKEN is required")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")


# ---- –î–æ–ø–æ–º—ñ–∂–Ω–µ: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω–∞ ----
def is_admin(user_id: int) -> bool:
    # –Ø–∫—â–æ ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω–∏–π ‚Äî –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å—ñ–º (–∑—Ä—É—á–Ω–æ –Ω–∞ –µ—Ç–∞–ø—ñ —Ç–µ—Å—Ç—ñ–≤)
    if ADMIN_CHAT_ID is None:
        return True
    return user_id == ADMIN_CHAT_ID


# ---- –ö–æ–º–∞–Ω–¥–∏ ----
@bot.message_handler(commands=['start'])
def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse.te</b> üöó\n\n"
        "–Ø –º–æ–∂—É –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏ —É –≤–∞—à –∫–∞–Ω–∞–ª.\n"
        "–°–ø—Ä–æ–±—É–π:\n"
        "‚Ä¢ <b>/post</b> –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –æ–ø—É–±–ª—ñ–∫—É—î —Ç–µ–∫—Å—Ç —É –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ <b>—Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º</b> ‚Äî –æ–ø—É–±–ª—ñ–∫—É—é —Ñ–æ—Ç–æ —É –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ <b>/postlogo</b> ‚Äî –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ª–æ–≥–æ—Ç–∏–ø + –æ–ø–∏—Å + —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        "‚Ä¢ <b>/id</b> ‚Äî –ø–æ–∫–∞–∂—É —Ç–≤—ñ–π Telegram ID (—â–æ–± –¥–æ–¥–∞—Ç–∏ —è–∫ ADMIN_CHAT_ID)\n"
        "‚Ä¢ <b>/help</b> ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        f"\n–ü—É–±–ª—ñ—á–Ω–∏–π –∫–∞–Ω–∞–ª –∑–∞—Ä–∞–∑: <code>{CHANNEL_ID}</code>"
    )
    bot.reply_to(message, text)


@bot.message_handler(commands=['help'])
def cmd_help(message: types.Message):
    text = (
        "<b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "‚Ä¢ /post –¢–ï–ö–°–¢ ‚Äî –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ (–§–æ—Ç–æ + –ø—ñ–¥–ø–∏—Å) ‚Äî —Ñ–æ—Ç–æ —É –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ /postlogo ‚Äî –ª–æ–≥–æ—Ç–∏–ø + –æ–ø–∏—Å\n"
        "‚Ä¢ /id ‚Äî —Ç–≤—ñ–π Telegram ID\n"
        "‚Ä¢ /help ‚Äî —Ü–µ –º–µ–Ω—é\n"
    )
    bot.reply_to(message, text)


@bot.message_handler(commands=['id'])
def cmd_id(message: types.Message):
    bot.reply_to(message, f"–¢–≤—ñ–π Telegram ID: <code>{message.from_user.id}</code>")


@bot.message_handler(commands=['post'])
def cmd_post(message: types.Message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏.")

    # –±–µ—Ä–µ–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —Ç–∞–∫: <code>/post –¢–ï–ö–°–¢</code>")

    text_to_post = parts[1].strip()
    try:
        bot.send_message(CHANNEL_ID, text_to_post, disable_web_page_preview=False)
        bot.reply_to(message, "‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        bot.reply_to(message, f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: <code>{e}</code>")


@bot.message_handler(commands=['postlogo'])
def cmd_postlogo(message: types.Message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏.")

    caption = (
        "üöó <b>–ê–≤—Ç–æ –∑ –°–®–ê —Ç–∞ –Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á</b>\n"
        "üá∫üá∏ –°–®–ê | üá™üá∫ –Ñ–≤—Ä–æ–ø–∞ ‚û°Ô∏è üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞\n"
        "üì≤ <b>+38 096 067 01 90</b>\n"
        "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ + –º–∏—Ç–Ω–∏—Ü—è + —Ä–µ–º–æ–Ω—Ç\n"
        "üí∏ –ï–∫–æ–Ω–æ–º—ñ—è –≤—ñ–¥ 20%\n"
        "‚úâÔ∏è –ü–∏—à–∏ –≤ Direct\n"
        "üìç Ternopil"
    )

    # –ª–æ–≥–æ –æ—á—ñ–∫—É—î–º–æ —è–∫ logo.png —É –∫–æ—Ä–µ–Ω—ñ —Ä–µ–ø–æ
    logo_path = os.path.join(os.getcwd(), "logo.png")
    if not os.path.exists(logo_path):
        return bot.reply_to(message, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª <code>logo.png</code> —É –∫–æ—Ä–µ–Ω—ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é.")

    try:
        with open(logo_path, "rb") as ph:
            bot.send_photo(CHANNEL_ID, ph, caption=caption)
        bot.reply_to(message, "‚úÖ –õ–æ–≥–æ—Ç–∏–ø + –æ–ø–∏—Å –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: <code>{e}</code>")


# ---- –§–æ—Ç–æ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ -> –≤ –∫–∞–Ω–∞–ª ----
@bot.message_handler(content_types=['photo'])
def on_photo(message: types.Message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ.")

    try:
        # –±–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à—É –≤–µ—Ä—Å—ñ—é —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        caption = message.caption or ""
        bot.send_photo(CHANNEL_ID, file_id, caption=caption)
        bot.reply_to(message, "‚úÖ –§–æ—Ç–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        bot.reply_to(message, f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: <code>{e}</code>")


# ---- –ó–∞–ø—É—Å–∫ ----
if __name__ == "__main__":
    # –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π –ø–æ–ª—ñ–Ω–≥ (Render Background Worker)
    bot.infinity_polling(skip_pending=True, logger_level="INFO")
