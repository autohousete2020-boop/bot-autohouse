import os
import logging
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ----------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=getattr(logging, LOG_LEVEL, logging.INFO))
log = logging.getLogger("bot")

# ---------- –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ----------
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")  # —á–∏—Å–ª–æ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞ ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∏–∂—á–µ
CHANNEL_ID = os.getenv("CHANNEL_ID")  # @public_name –∞–±–æ -100xxxxxxxxxx
PHONE_E164 = os.getenv("PHONE_E164", "+380960670190")
PHONE_READABLE = os.getenv("PHONE_READABLE", "+38 096 067 01 90")

if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# ---------- –ë–æ—Ç ----------
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# –í–∏–º–∏–∫–∞—î–º–æ –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫ (—â–æ–± polling –Ω–µ –ª–æ–≤–∏–≤ 409)
try:
    bot.delete_webhook(drop_pending_updates=True)
except Exception as e:
    log.warning(f"delete_webhook failed: {e}")

def is_admin(chat_id) -> bool:
    try:
        return ADMIN_ID is not None and int(chat_id) == int(ADMIN_ID)
    except Exception:
        return False

# ---------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ----------
def main_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    kb.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return kb

# ---------- –°—Ç–∞—Ä—Ç/–•–µ–ª–ø ----------
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.reply_to(
        m,
        "<b>–ü—Ä–∏–≤—ñ—Ç!</b> –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
        "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order.",
        reply_markup=main_kb(),
    )

@bot.message_handler(commands=["help"])
def cmd_help(m):
    bot.reply_to(
        m,
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/order ‚Äì –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É\n"
        "/contact ‚Äì –∫–æ–Ω—Ç–∞–∫—Ç–∏\n"
        "/post <—Ç–µ–∫—Å—Ç> ‚Äì –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª (–ª–∏—à–µ –∞–¥–º—ñ–Ω)",
        reply_markup=main_kb(),
    )

@bot.message_handler(commands=["contact"])
def cmd_contact(m):
    bot.reply_to(m, f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{PHONE_READABLE}</b>", reply_markup=main_kb())

# ---------- –ü—Ä–æ—Å—Ç–∞ —Ñ–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ ----------
STATE = {}         # user_id -> –Ω–∞–∑–≤–∞ –∫—Ä–æ–∫—É
LEAD = {}          # user_id -> —Ç–∏–º—á–∞—Å–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

def ask(m, text):
    return bot.send_message(m.chat.id, text)

@bot.message_handler(commands=["order"])
def cmd_order(m):
    STATE[m.from_user.id] = "brand"
    LEAD[m.from_user.id] = {}
    ask(m, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?")

@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def btn_order(m):
    cmd_order(m)

@bot.message_handler(func=lambda m: STATE.get(m.from_user.id) == "brand")
def step_brand(m):
    LEAD[m.from_user.id]["brand"] = m.text.strip()
    STATE[m.from_user.id] = "budget"
    ask(m, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?")

@bot.message_handler(func=lambda m: STATE.get(m.from_user.id) == "budget")
def step_budget(m):
    LEAD[m.from_user.id]["budget"] = m.text.strip()
    STATE[m.from_user.id] = "year"
    ask(m, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")

@bot.message_handler(func=lambda m: STATE.get(m.from_user.id) == "year")
def step_year(m):
    LEAD[m.from_user.id]["year"] = m.text.strip()
    data = LEAD.pop(m.from_user.id, {})
    STATE.pop(m.from_user.id, None)

    summary = (
        "üÜï <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
        f"üë§ {m.from_user.first_name or ''} @{m.from_user.username or ''}\n"
        f"üöó –ú–æ–¥–µ–ª—å: {data.get('brand','-')}\n"
        f"üíµ –ë—é–¥–∂–µ—Ç: {data.get('budget','-')}\n"
        f"üìÖ –†—ñ–∫: {data.get('year','-')}\n"
        f"üìû {PHONE_READABLE}"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É
    try:
        if ADMIN_ID:
            bot.send_message(int(ADMIN_ID), summary)
    except Exception as e:
        log.error(f"send to admin failed: {e}")

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.reply_to(m, "–î—è–∫—É—é! –ú–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∞—à—É –∑–∞—è–≤–∫—É. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è", reply_markup=main_kb())

# ---------- –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª (–¥–ª—è –∞–¥–º—ñ–Ω–∞) ----------
@bot.message_handler(commands=["post"])
def cmd_post(m):
    if not is_admin(m.from_user.id):
        return bot.reply_to(m, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—É.")

    text = m.text.partition(" ")[2].strip()
    if not CHANNEL_ID:
        return bot.reply_to(m, "CHANNEL_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π —É Render ‚Üí Environment.")
    if not text:
        return bot.reply_to(m, "–ü—Ä–∏–∫–ª–∞–¥: /post –ü—Ä–æ–¥–∞–º–æ Audi A6 2018‚Ä¶")

    try:
        bot.send_message(CHANNEL_ID, text, disable_web_page_preview=False)
        bot.reply_to(m, "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ ‚úÖ")
    except Exception as e:
        log.error(f"post failed: {e}")
        bot.reply_to(m, f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    log.info("Bot started. Polling‚Ä¶")
    # allowed_updates –æ–±–º–µ–∂—É—î —Ç–∏–ø–∏ –ø–æ–¥—ñ–π —Ç–∞ —Ä–æ–±–∏—Ç—å polling —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–∏–º
    bot.infinity_polling(skip_pending=True, timeout=20, long_polling_timeout=20, allowed_updates=["message"])
