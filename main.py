import os
import time
import logging
import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ (@your_channel)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# --- –∫–æ–º–∞–Ω–¥–∏ ---
@bot.message_handler(commands=['start'])
def cmd_start(m):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    kb.add(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    bot.reply_to(m,
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order.",
        reply_markup=kb
    )

@bot.message_handler(commands=['help'])
def cmd_help(m):
    bot.reply_to(m, "–ö–æ–º–∞–Ω–¥–∏:\n/start ‚Äì –º–µ–Ω—é\n/order ‚Äì –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–ø–∏—Ç\n/post ‚Äì —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª")

@bot.message_handler(commands=['order'])
def cmd_order(m):
    ask_brand(m)

def ask_brand(m):
    msg = bot.send_message(m.chat.id, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?")
    bot.register_next_step_handler(msg, ask_budget)

def ask_budget(m):
    brand = m.text.strip()
    msg = bot.send_message(m.chat.id, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?")
    bot.register_next_step_handler(msg, lambda mm: ask_year(mm, brand))

def ask_year(m, brand):
    budget = m.text.strip()
    msg = bot.send_message(m.chat.id, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")
    bot.register_next_step_handler(msg, lambda mm: finalize_order(mm, brand, budget))

def finalize_order(m, brand, budget):
    year = m.text.strip()
    phone = "+38 096 067 01 90"
    text = (f"‚úÖ –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!\n\n"
            f"‚Ä¢ –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: <b>{brand}</b>\n"
            f"‚Ä¢ –ë—é–¥–∂–µ—Ç: <b>{budget}$</b>\n"
            f"‚Ä¢ –†—ñ–∫: <b>{year}</b>\n\n"
            f"–ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—å —ñ–∑ –≤–∞–º–∏. –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>")
    bot.send_message(m.chat.id, text)

    # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ ‚Äî –ø–µ—Ä–µ–∫–∏–Ω—É—Ç–∏ –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç
    if ADMIN_CHAT_ID:
        bot.send_message(int(ADMIN_CHAT_ID),
                         f"üÜï –õ—ñ–¥ –≤—ñ–¥ @{m.from_user.username or m.from_user.id}\n" + text)

@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def btn_order(m): cmd_order(m)

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def btn_contacts(m):
    bot.reply_to(m, "–¢–µ–ª–µ—Ñ–æ–Ω: <b>+38 096 067 01 90</b>\nInstagram: autohouse.te", parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def btn_help(m): cmd_help(m)

# --- –Ω–∞–¥—ñ–π–Ω–∏–π polling –∑ –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ 409/–º–µ—Ä–µ–∂–µ–≤–∏—Ö ---
if __name__ == "__main__":
    while True:
        try:
            logging.info("Starting polling‚Ä¶")
            bot.infinity_polling(timeout=60, long_polling_timeout=20, allowed_updates=[])
        except ApiTelegramException as e:
            # 409 = ‚ÄúConflict: terminated by other getUpdates request‚Äù
            if getattr(e, "error_code", None) == 409:
                logging.warning("Got 409 Conflict. Seems another instance is running. Retrying in 15s‚Ä¶")
                time.sleep(15)
            else:
                logging.exception("Telegram API error, retrying in 10s‚Ä¶")
                time.sleep(10)
        except Exception:
            logging.exception("Unexpected error, retrying in 10s‚Ä¶")
            time.sleep(10)
