import os
import logging
from telebot import TeleBot, types

# -------------------- –õ–û–ì–Ü–ù–ì --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
log = logging.getLogger("bot")

# -------------------- ENV --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "").strip()  # —Ñ–æ—Ä–º–∞—Ç: @your_channel
CONTACT_PHONE = os.getenv("CONTACT_PHONE", "+380000000000")
CONTACT_CITY = os.getenv("CONTACT_CITY", "Ternopil")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not ADMIN_CHAT_ID:
    raise RuntimeError("ADMIN_CHAT_ID is not set")
if not CHANNEL_USERNAME:
    log.warning("CHANNEL_USERNAME is empty. /post —É –∫–∞–Ω–∞–ª –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ –±—É–¥–µ, –¥–æ–∫–∏ –Ω–µ –∑–∞–¥–∞—Å—Ç–µ @username –∫–∞–Ω–∞–ª—É.")

bot = TeleBot(BOT_TOKEN, parse_mode="HTML")

# -------------------- –°–¢–ê–ù–ò –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í --------------------
# –ü—Ä–æ—Å—Ç–∏–π FSM –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫–∞—Ö
user_state = {}        # user_id -> {"step": ..., "data": {...}}
STATE_NONE = "NONE"
STATE_ORDER_MAKE = "ORDER_MAKE"
STATE_POST = "POST"

def reset_state(uid: int):
    user_state[uid] = {"step": None, "data": {}, "mode": STATE_NONE}

# -------------------- –ö–ù–û–ü–ö–ò --------------------
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    kb.row(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return kb

def post_cta_inline(bot_username: str):
    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É" –ø—ñ–¥ –ø–æ—Å—Ç–æ–º —É –∫–∞–Ω–∞–ª—ñ ‚Üí –≤—ñ–¥–∫—Ä–∏–≤–∞—î –±–æ—Ç–∞ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start=order
    url = f"https://t.me/{bot_username}?start=order"
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", url=url))
    return ikb

# -------------------- –•–ï–ù–î–õ–ï–†–ò --------------------
@bot.message_handler(commands=["start"])
def cmd_start(m: types.Message):
    uid = m.from_user.id
    text = ( "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
             "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
             "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ –∫–æ–º–∞–Ω–¥—É /order.\n"
             "–©–æ–± –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª ‚Äî /post." )
    reset_state(uid)

    # —è–∫—â–æ –ø—Ä–∏–π—à–æ–≤ deep-link ?start=order ‚Üí –æ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ—Ä–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    if m.text and ("start order" in m.text or m.text.strip() == "/start order"):
        return start_order_flow(m)
    bot.send_message(m.chat.id, text, reply_markup=main_menu())

@bot.message_handler(commands=["help"])
def cmd_help(m: types.Message):
    bot.send_message(
        m.chat.id,
        "–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É\n"
        "/post ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª (–±–æ—Ç –º–∞—î –±—É—Ç–∏ –∞–¥–º—ñ–Ω–æ–º –∫–∞–Ω–∞–ª—É)\n"
        "/contacts ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç–∏",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["contacts"])
def cmd_contacts(m: types.Message):
    bot.send_message(
        m.chat.id,
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{CONTACT_PHONE}</b>\nüìç –ú—ñ—Å—Ç–æ: {CONTACT_CITY}",
        reply_markup=main_menu()
    )

# ----------- –ó–ê–ú–û–í–õ–ï–ù–ù–Ø -----------
@bot.message_handler(commands=["order"])
def start_order_flow(m: types.Message):
    uid = m.from_user.id
    user_state[uid] = {"mode": STATE_ORDER_MAKE, "step": "car", "data": {}}
    bot.send_message(m.chat.id, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id, {}).get("mode") == STATE_ORDER_MAKE)
def order_flow(m: types.Message):
    uid = m.from_user.id
    st = user_state.get(uid, {})
    step = st.get("step")
    data = st.get("data", {})

    if step == "car":
        data["car"] = m.text.strip()
        st["step"] = "budget"
        bot.send_message(m.chat.id, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?")
    elif step == "budget":
        data["budget"] = m.text.strip()
        st["step"] = "year"
        bot.send_message(m.chat.id, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")
    elif step == "year":
        data["year"] = m.text.strip()
        # –ü—ñ–¥—Å—É–º–æ–∫
        summary = (
            "‚úÖ –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!\n\n"
            f"‚Ä¢ –ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: <b>{data.get('car')}</b>\n"
            f"‚Ä¢ –ë—é–¥–∂–µ—Ç: <b>{data.get('budget')}$</b>\n"
            f"‚Ä¢ –†—ñ–∫: <b>{data.get('year')}</b>\n\n"
            f"–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—å —ñ–∑ –≤–∞–º–∏. –¢–µ–ª–µ—Ñ–æ–Ω: <b>{CONTACT_PHONE}</b>"
        )
        bot.send_message(m.chat.id, summary, reply_markup=main_menu())

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ
        try:
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üÜï <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
                f"–í—ñ–¥: {m.from_user.first_name} (@{m.from_user.username or '‚Äî'}) [id {uid}]\n"
                f"–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: {data.get('car')}\n"
                f"–ë—é–¥–∂–µ—Ç: {data.get('budget')}$\n"
                f"–†—ñ–∫: {data.get('year')}"
            )
        except Exception as e:
            log.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É: {e}")

        reset_state(uid)
    else:
        reset_state(uid)
        bot.send_message(m.chat.id, "–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É. –ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order.", reply_markup=main_menu())

# –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def menu_make_order(m: types.Message):
    start_order_flow(m)

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def menu_contacts(m: types.Message):
    cmd_contacts(m)

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def menu_help(m: types.Message):
    cmd_help(m)

# ----------- /post: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ —É –∫–∞–Ω–∞–ª -----------
@bot.message_handler(commands=["post"])
def start_post_flow(m: types.Message):
    if not CHANNEL_USERNAME:
        bot.send_message(m.chat.id, "‚ùóÔ∏è–ù–µ –∑–∞–¥–∞–Ω–æ CHANNEL_USERNAME —É Environment. –î–æ–¥–∞–π—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª—É —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –±–æ—Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    uid = m.from_user.id
    user_state[uid] = {"mode": STATE_POST, "step": "title", "data": {}}
    bot.send_message(m.chat.id, "–ù–∞–¥—ñ—à–ª–∏ <b>–∑–∞–≥–æ–ª–æ–≤–æ–∫</b> –¥–ª—è –ø–æ—Å—Ç–∞ (—Ä—è–¥–∫–æ–º).", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda msg: user_state.get(msg.from_user.id, {}).get("mode") == STATE_POST)
def post_flow(m: types.Message):
    uid = m.from_user.id
    st = user_state.get(uid, {})
    step = st.get("step")
    data = st.get("data", {})

    if step == "title":
        data["title"] = m.text.strip()
        st["step"] = "desc"
        bot.send_message(m.chat.id, "–î–æ–±—Ä–µ. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ <b>–æ–ø–∏—Å</b> (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤).")
    elif step == "desc":
        data["desc"] = m.text
        st["step"] = "photo_q"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row(types.KeyboardButton("–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ"), types.KeyboardButton("–ë–µ–∑ —Ñ–æ—Ç–æ"))
        bot.send_message(m.chat.id, "–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ –¥–æ –ø–æ—Å—Ç–∞?", reply_markup=kb)
    elif step == "photo_q":
        if m.text == "–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ":
            st["step"] = "photo"
            bot.send_message(m.chat.id, "–ù–∞–¥—ñ—à–ª–∏ <b>—Ñ–æ—Ç–æ</b> –æ–¥–Ω–∏–º –∑–Ω—ñ–º–∫–æ–º.", reply_markup=ty
