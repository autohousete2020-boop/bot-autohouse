import os
import time
import logging
import telebot
from telebot import types

# ====== ENV ======
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # —Ç–≤—ñ–π Telegram ID (—Ö—Ç–æ –º–æ–∂–µ –ø–æ—Å—Ç–∏—Ç–∏ –≤ –∫–∞–Ω–∞–ª)
# –û–¥–∏–Ω —ñ–∑ –¥–≤–æ—Ö: –ø—É–±–ª—ñ—á–Ω–∏–π username –∫–∞–Ω–∞–ª—É –∞–±–æ —á–∏—Å–ª–æ–≤–∏–π ID (-100...)
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "")  # –Ω–∞–ø—Ä. @autohouse_te
CHANNEL_ID = os.getenv("CHANNEL_ID", "")              # –Ω–∞–ø—Ä. -1001234567890
PHONE_E164 = os.getenv("PHONE_E164", "+380960670190")         # –¥–ª—è –∫–Ω–æ–ø–∫–∏ tel:
PHONE_READABLE = os.getenv("PHONE_READABLE", "+38 096 067 01 90")  # —É —Ç–µ–∫—Å—Ç–∞—Ö
INSTAGRAM_URL = os.getenv("INSTAGRAM_URL", "")  # –æ–ø—Ü—ñ–π–Ω–æ, —è–∫—â–æ —Ö–æ—á–µ—à –∫–Ω–æ–ø–∫—É Instagram

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

TARGET_CHANNEL = CHANNEL_ID if CHANNEL_ID else CHANNEL_USERNAME  # –æ–¥–Ω–µ –∑ –¥–≤–æ—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–æ

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("bot")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫, —â–æ–± polling –Ω–µ –±–∏–≤—Å—è –∑ webhook
try:
    bot.delete_webhook(drop_pending_updates=True)
except Exception as e:
    log.warning(f"delete_webhook warn: {e}")

# –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è get_me()
BOT_DEEPLINK = None  # —Ç–∏–ø—É https://t.me/YourBot?start=order

# ====== –ö–ù–û–ü–ö–ò –ø—ñ–¥ –ø–æ—Å—Ç–æ–º –∫–∞–Ω–∞–ª—É ======
def channel_buttons() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    # –∫–Ω–æ–ø–∫–∞ –≤ –±–æ—Ç–∞ –∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∫–µ—Ç–∏
    order_btn = types.InlineKeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", url=BOT_DEEPLINK or "https://t.me/")
    kb.add(order_btn)
    # –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–∑–≤–æ–Ω–∏—Ç–∏
    kb.add(types.InlineKeyboardButton("üìû –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏", url=f"tel:{PHONE_E164}"))
    # –æ–ø—Ü—ñ–π–Ω–æ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º
    if INSTAGRAM_URL:
        kb.add(types.InlineKeyboardButton("üì∑ Instagram", url=INSTAGRAM_URL))
    return kb

# ====== –ú–ï–ù–Æ —É –ø—Ä–∏–≤–∞—Ç—ñ ======
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É"))
    kb.row(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return kb

def cancel_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    return kb

# ====== –ü–†–û–°–¢–ê FSM –¥–ª—è –∞–Ω–∫–µ—Ç–∏ ======
STATE = {}   # user_id -> step
DATA = {}    # user_id -> dict

def reset_user(uid: int):
    STATE.pop(uid, None)
    DATA.pop(uid, None)

def start_order(chat_id: int, from_user):
    STATE[chat_id] = "car"
    DATA[chat_id] = {"by": f"@{from_user.username}" if from_user.username else str(from_user.id)}
    bot.send_message(chat_id, "üöó –í–∫–∞–∂–∏ –º–∞—Ä–∫—É/–º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä. BMW 320i):", reply_markup=cancel_kb())

@bot.message_handler(commands=["start"])
def cmd_start(m: types.Message):
    # deep link /start order -> –æ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∫–µ—Ç—É
    payload = m.text.split(maxsplit=1)[1].strip() if len(m.text.split(maxsplit=1)) == 2 else ""
    if payload.startswith("order"):
        start_order(m.chat.id, m.from_user)
        return
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
        "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É¬ª –∞–±–æ /order.",
        reply_markup=main_kb()
    )

@bot.message_handler(commands=["help"])
def cmd_help(m: types.Message):
    bot.send_message(
        m.chat.id,
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ /contacts ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç–∏\n"
        "‚Ä¢ /post <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª (–ª–∏—à–µ –∞–¥–º—ñ–Ω)\n"
        "‚Ä¢ (—è–∫ –∞–¥–º—ñ–Ω) –Ω–∞–¥—ñ—à–ª–∏ –§–û–¢–û –∑ –ø—ñ–¥–ø–∏—Å–æ–º ‚Äî —è –æ–ø—É–±–ª—ñ–∫—É—é –≤ –∫–∞–Ω–∞–ª –∑ –∫–Ω–æ–ø–∫–∞–º–∏",
        reply_markup=main_kb()
    )

@bot.message_handler(commands=["contacts"])
def cmd_contacts(m: types.Message):
    bot.send_message(
        m.chat.id,
        f"üìû <b>{PHONE_READABLE}</b>\n"
        "üìç –¢–µ—Ä–Ω–æ–ø—ñ–ª—å\n"
        + (f"Instagram: {INSTAGRAM_URL}" if INSTAGRAM_URL else ""),
        reply_markup=main_kb(),
        disable_web_page_preview=True
    )

@bot.message_handler(commands=["order"])
def cmd_order(m: types.Message):
    start_order(m.chat.id, m.from_user)

@bot.message_handler(func=lambda msg: msg.text == "üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")
def btn_order(m: types.Message):
    start_order(m.chat.id, m.from_user)

@bot.message_handler(func=lambda m: STATE.get(m.from_user.id) == "car")
def st_car(m: types.Message):
    if m.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        reset_user(m.from_user.id); bot.reply_to(m, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb()); return
    DATA[m.from_user.id]["car"] = m.text.strip()
    STATE[m.from_user.id] = "budget"
    bot.send_message(m.chat.id, "üí∏ –Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $, –≥—Ä–Ω –∞–±–æ ‚Ç¨)?", reply_markup=cancel_kb())

@bot.message_handler(func=lambda m: STATE.get(m.from_user.id) == "budget")
def st_budget(m: types.Message):
    if m.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        reset_user(m.from_user.id); bot.reply_to(m, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb()); return
    DATA[m.from_user.id]["budget"] = m.text.strip()
    STATE[m.from_user.id] = "year"
    bot.send_message(m.chat.id, "üìÖ –ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É? (–º–æ–∂–Ω–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω)", reply_markup=cancel_kb())

@bot.message_handler(func=lambda m: STATE.get(m.from_user.id) == "year")
def st_year(m: types.Message):
    if m.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        reset_user(m.from_user.id); bot.reply_to(m, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb()); return
    DATA[m.from_user.id]["year"] = m.text.strip()
    STATE[m.from_user.id] = "name"
    bot.send_message(m.chat.id, "üë§ –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å? (—ñ–º'—è)", reply_markup=cancel_kb())

@bot.message_handler(func=lambda m: STATE.get(m.from_user.id) == "name")
def st_name(m: types.Message):
    if m.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        reset_user(m.from_user.id); bot.reply_to(m, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb()); return
    DATA[m.from_user.id]["name"] = m.text.strip()
    STATE[m.from_user.id] = "contact"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True))
    kb.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    bot.send_message(m.chat.id, "üìû –î–∞–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ @–Ω—ñ–∫:", reply_markup=kb)

@bot.message_handler(content_types=["contact"])
def st_contact_share(m: types.Message):
    if STATE.get(m.from_user.id) != "contact":
        return
    DATA[m.from_user.id]["contact"] = m.contact.phone_number
    finish_order(m)

@bot.message_handler(func=lambda m: STATE.get(m.from_user.id) == "contact")
def st_contact_text(m: types.Message):
    if m.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        reset_user(m.from_user.id); bot.reply_to(m, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb()); return
    DATA[m.from_user.id]["contact"] = m.text.strip()
    finish_order(m)

def finish_order(m: types.Message):
    uid = m.from_user.id
    d = DATA.get(uid, {})
    text = (
        "üÜï <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
        f"üë§ {d.get('name','-')} ({d.get('by','-')})\n"
        f"üöó {d.get('car','-')}\n"
        f"üí∏ {d.get('budget','-')}\n"
        f"üìÖ {d.get('year','-')}\n"
        f"üìû {d.get('contact','-')}"
    )
