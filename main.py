# main.py
import os
import re
import logging
import telebot
from telebot import types

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0") or "0")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "").strip()  # e.g. @autohouse_te
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # numeric id for private channels (optional)

if not BOT_TOKEN:
    raise RuntimeError("Env BOT_TOKEN is empty. Set BOT_TOKEN in Render ‚Üí Environment.")
if not ADMIN_CHAT_ID:
    raise RuntimeError("Env ADMIN_CHAT_ID is empty.")

# ---------- BOT ----------
logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
BOT_USERNAME = None  # –∑–∞–ø–æ–≤–Ω–∏–º–æ –ø—ñ—Å–ª—è get_me()

# –ü–∞–º'—è—Ç—å –¥—ñ–∞–ª–æ–≥—ñ–≤
user_state = {}   # chat_id -> step name
order_data = {}   # chat_id -> dict

def channel_target():
    """–ö—É–¥–∏ –ø–æ—Å—Ç–∏—Ç–∏: –ø—É–±–ª—ñ—á–Ω–∏–π @username –∞–±–æ —á–∏—Å–ª–æ–≤–∏–π id."""
    return CHANNEL_ID if CHANNEL_ID else CHANNEL_USERNAME

# --------- –£–¢–ò–õ–Ü–¢–ò ----------
PHONE_RE = re.compile(r"^\+?\d[\d\s\-\(\)]{7,}$")

def ask_make(chat_id):
    user_state[chat_id] = "make"
    bot.send_message(chat_id, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?")

def ask_budget(chat_id):
    user_state[chat_id] = "budget"
    bot.send_message(chat_id, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?")

def ask_year(chat_id):
    user_state[chat_id] = "year"
    bot.send_message(chat_id, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")

def ask_phone(chat_id):
    user_state[chat_id] = "phone"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True))
    kb.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –π –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É"))
    bot.send_message(
        chat_id,
        "–ó–∞–ª–∏—à—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É.\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.",
        reply_markup=kb
    )

def clear_state(chat_id):
    user_state.pop(chat_id, None)
    order_data.pop(chat_id, None)
    bot.send_chat_action(chat_id, "typing")

def lead_card(data: dict) -> str:
    return (
        "‚úÖ <b>–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        f"‚Ä¢ <b>–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:</b> {telebot.util.escape(data.get('make',''))}\n"
        f"‚Ä¢ <b>–ë—é–¥–∂–µ—Ç:</b> {telebot.util.escape(str(data.get('budget','')))}$\n"
        f"‚Ä¢ <b>–†—ñ–∫:</b> {telebot.util.escape(str(data.get('year','')))}\n"
        f"‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞:</b> {telebot.util.escape(data.get('phone','‚Äî'))}"
    )

def admin_lead_card(user, data: dict) -> str:
    name = telebot.util.escape(f"{user.first_name or ''} {user.last_name or ''}".strip())
    uname = f"@{user.username}" if getattr(user, 'username', None) else "‚Äî"
    uid = user.id
    return (
        "üì• <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> {name or '‚Äî'} ({uname}), id: <code>{uid}</code>\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {telebot.util.escape(data.get('phone','‚Äî'))}\n"
        f"üöó <b>–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:</b> {telebot.util.escape(data.get('make',''))}\n"
        f"üíµ <b>–ë—é–¥–∂–µ—Ç:</b> {telebot.util.escape(str(data.get('budget','')))}$\n"
        f"üìÖ <b>–†—ñ–∫:</b> {telebot.util.escape(str(data.get('year','')))}"
    )

# ---------- –ú–ï–ù–Æ ----------
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    kb.add(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), types.KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"))
    return kb

@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    global BOT_USERNAME
    if BOT_USERNAME is None:
        me = bot.get_me()
        BOT_USERNAME = me.username

    text = (
        "<b>–ü—Ä–∏–≤—ñ—Ç!</b> –¶–µ –±–æ—Ç AutoHouse.\n"
        "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ /order."
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu())
    # –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start=lead ‚Äî –æ–¥—Ä–∞–∑—É —Ñ–æ—Ä–º–∞
    if message.text and " " in message.text:
        _, param = message.text.split(" ", 1)
        if param.strip().lower().startswith("lead"):
            ask_make(message.chat.id)

@bot.message_handler(commands=["order"])
def cmd_order(message: types.Message):
    order_data[message.chat.id] = {}
    ask_make(message.chat.id)

@bot.message_handler(commands=["help"])
def cmd_help(message: types.Message):
    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à—ñ—Ç—å —É –º–µ–Ω—é ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª, –∞ —è –∑–∞–¥–∞–º –∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å —ñ –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
        "–ö–æ–º–∞–Ω–¥–∏: /start, /order, /post (–¥–ª—è –∞–¥–º—ñ–Ω–∞)."
    )

@bot.message_handler(commands=["contacts", "contact"])
def cmd_contacts(message: types.Message):
    bot.send_message(
        message.chat.id,
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>+38 096 067 01 90</b>\n"
        "Instagram: <a href='https://instagram.com/autohouse.te'>@autohouse.te</a>\n"
        "–ê–¥—Ä–µ—Å–∞: –¢–µ—Ä–Ω–æ–ø—ñ–ª—å",
        disable_web_page_preview=True
    )

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def btn_contacts(message: types.Message):
    cmd_contacts(message)

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def btn_help(message: types.Message):
    cmd_help(message)

@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def btn_order(message: types.Message):
    cmd_order(message)

# ---------- –§–û–†–ú–ê –ó–ê–Ø–í–ö–ò ----------
@bot.message_handler(content_types=["contact"])
def on_contact(message: types.Message):
    if user_state.get(message.chat.id) != "phone":
        return
    phone = message.contact.phone_number
    order_data.setdefault(message.chat.id, {})["phone"] = phone
    finish_lead(message)

@bot.message_handler(func=lambda m: user_state.get(m.chat.id) in {"make", "budget", "year", "phone"}, content_types=["text"])
def order_steps(message: types.Message):
    chat_id = message.chat.id
    state = user_state.get(chat_id)

    if state == "make":
        order_data.setdefault(chat_id, {})["make"] = message.text.strip()
        ask_budget(chat_id)
        return

    if state == "budget":
        # –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä–µ–∂–µ–º–æ —è–∫ —î; –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ —á–∏—Å–ª–æ
        order_data.setdefault(chat_id, {})["budget"] = re.sub(r"[^\d]", "", message.text) or message.text.strip()
        ask_year(chat_id)
        return

    if state == "year":
        order_data.setdefault(chat_id, {})["year"] = re.sub(r"[^\d]", "", message.text) or message.text.strip()
        ask_phone(chat_id)
        return

    if state == "phone":
        txt = message.text.strip()
        if txt.lower().startswith("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"):
            bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º'.")
            return
        if not PHONE_RE.match(txt):
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX.")
            return
        order_data.setdefault(chat_id, {})["phone"] = txt
        finish_lead(message)

def finish_lead(message: types.Message):
    chat_id = message.chat.id
    data = order_data.get(chat_id, {})
    # –ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç—É
    bot.send_message(chat_id, lead_c
