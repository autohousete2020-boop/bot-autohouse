# -*- coding: utf-8 -*-
import os
import logging
import re
from typing import Dict, Any

import telebot
from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
    Contact,
)

# -------------------- CONFIG --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "771906613"))
# –ü—É–±–ª—ñ—á–Ω–∏–π –∫–∞–Ω–∞–ª: —Ç—ñ–ª—å–∫–∏ username –ë–ï–ó @, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "autohouse_te"
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "").strip()  # –ø—Ä–∏–∫–ª–∞–¥: autohouse_te
# –Ø–∫—â–æ –ø–ª–∞–Ω—É—î—à –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª, –∫—Ä–∞—â–µ –∑–∞–≤–µ—Å—Ç–∏ CHANNEL_ID = "-100xxxxxxxxxx"
# —ñ –¥–∞–ª—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–∞–º–µ –π–æ–≥–æ —É bot.send_photo(CHANNEL_ID, ...)

if not BOT_TOKEN:
    raise RuntimeError("ENV BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π.")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
me = bot.get_me()
BOT_LINK = f"https://t.me/{me.username}"

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

# -------------------- –î–ï–†–ñ–ê–í–ê –î–õ–Ø –ó–ê–ú–û–í–õ–ï–ù–¨ --------------------
# –ü—Ä–æ—Å—Ç–∞ –ø–∞–º º—è—Ç—å —É RAM –¥–ª—è –∫—Ä–æ–∫—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
user_state: Dict[int, Dict[str, Any]] = {}
# –§–ª–∞–≥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—É –ø—ñ—Å–ª—è /post
awaiting_post_photo: Dict[int, bool] = {}

ASK_MODEL = "ask_model"
ASK_BUDGET = "ask_budget"
ASK_YEAR = "ask_year"
ASK_PHONE = "ask_phone"

# -------------------- –î–û–ü. –ö–ù–û–ü–ö–ò --------------------
def main_menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    kb.row("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
    return kb

def contact_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    kb.add(KeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    return kb

def order_button_inline() -> InlineKeyboardMarkup:
    m = InlineKeyboardMarkup()
    # deep-link –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–æ—Ç–∞ —ñ —Å—Ç–∞—Ä—Ç—É—î —Ñ–æ—Ä–º—É
    m.add(InlineKeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", url=f"{BOT_LINK}?start=order"))
    return m

# -------------------- –î–û–ü–û–ú–û–ñ–ù–Ü --------------------
def sanitize_text(s: str) -> str:
    """–û—á–∏—â–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤/–ø–µ—Ä–µ–Ω–æ—Å—ñ–≤, –±–µ–∑–ø–µ—á–Ω–µ –¥–ª—è HTML."""
    return re.sub(r"\s+", " ", s).strip()

def valid_budget(text: str) -> bool:
    return bool(re.fullmatch(r"\d{1,9}", text.replace(" ", "")))

def valid_year(text: str) -> bool:
    return bool(re.fullmatch(r"(19[6-9]\d|20\d{2})", text.strip()))

def normalize_phone(raw: str) -> str:
    # –ü—Ä–æ—Å—Ç–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è: –∑–∞–ª–∏—à–∞—î–º–æ + —Ç–∞ —Ü–∏—Ñ—Ä–∏
    s = re.sub(r"[^\d+]", "", raw)
    return s

def lead_text(lead: Dict[str, Any]) -> str:
    brand = sanitize_text(lead.get("brand", "‚Äî"))
    budget = sanitize_text(lead.get("budget", "‚Äî"))
    year = sanitize_text(lead.get("year", "‚Äî"))
    phone = sanitize_text(lead.get("phone", "‚Äî"))

    return (
        "‚úÖ <b>–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n"
        f"‚Ä¢ <b>–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:</b> {brand}\n"
        f"‚Ä¢ <b>–ë—é–¥–∂–µ—Ç:</b> {budget}$\n"
        f"‚Ä¢ <b>–†—ñ–∫:</b> {year}\n\n"
        f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏. "
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}"
    )

def admin_lead_text(user: telebot.types.User, lead: Dict[str, Any]) -> str:
    return (
        "üÜï <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <b>{user.first_name or ''} {user.last_name or ''}</b> @{user.username or '‚Äî'} (id {user.id})\n\n"
        f"{lead_text(lead)}"
    )

# -------------------- –•–ï–ù–î–õ–ï–†–ò --------------------
@bot.message_handler(commands=["start"])
def cmd_start(message: Message):
    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ deep-link /start order
    if message.text and " " in message.text:
        arg = message.text.split(" ", 1)[1].strip()
        if arg.lower().startswith("order"):
            _start_order(message)
            return

    welcome = (
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç <b>AutoHouse</b>.\n"
        "–ü—ñ–¥–±–µ—Ä—É –∞–≤—Ç–æ –∑ –°–®–ê/–Ñ–≤—Ä–æ–ø–∏ –ø—ñ–¥ –∫–ª—é—á.\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É."
    )
    bot.reply_to(message, welcome, reply_markup=main_menu_kb())

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", content_types=["text"])
@bot.message_handler(commands=["help"])
def cmd_help(message: Message):
    bot.reply_to(
        message,
        "–©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –∞–±–æ –∫–æ–º–∞–Ω–¥—É /order.\n"
        "–î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª ‚Äî —É –ø—Ä–∏–≤–∞—Ç—ñ –∑ –±–æ—Ç–æ–º –≤–≤–µ–¥–∏ /post —ñ –¥–∞–ª—ñ –Ω–∞–¥—ñ—à–ª–∏ <b>—Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º</b>.",
        reply_markup=main_menu_kb(),
    )

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", content_types=["text"])
def contacts(message: Message):
    bot.reply_to(
        message,
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +38 096 067 01 90\n"
        "Instagram: https://instagram.com/autohouse.te\n"
        "–ú—ñ—Å—Ç–æ: –¢–µ—Ä–Ω–æ–ø—ñ–ª—å",
        reply_markup=main_menu_kb(),
    )

@bot.message_handler(commands=["order"])
@bot.message_handler(func=lambda m: m.text == "üöó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", content_types=["text"])
def start_order(message: Message):
    _start_order(message)

def _start_order(message: Message):
    user_state[message.from_user.id] = {"step": ASK_MODEL}
    bot.reply_to(message, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏")))

@bot.message_handler(content_types=["text"])
def on_text(message: Message):
    uid = message.from_user.id
    if message.text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
        user_state.pop(uid, None)
        awaiting_post_photo.pop(uid, None)
        bot.reply_to(message, "–°–∫–∞—Å–æ–≤–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.", reply_markup=main_menu_kb())
        return

    # –û–±—Ä–æ–±–∫–∞ –∫—Ä–æ–∫—ñ–≤ –∑–∞—è–≤–∫–∏
    st = user_state.get(uid)
    if st:
        step = st.get("step")

        if step == ASK_MODEL:
            st["brand"] = sanitize_text(message.text)
            st["step"] = ASK_BUDGET
            bot.reply_to(message, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç (—É $)?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏")))
            return

        if step == ASK_BUDGET:
            val = message.text.replace(" ", "")
            if not valid_budget(val):
                bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –±—é–¥–∂–µ—Ç —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15000")
                return
            st["budget"] = val
            st["step"] = ASK_YEAR
            bot.reply_to(message, "–ë–∞–∂–∞–Ω–∏–π —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É?")
            return

        if step == ASK_YEAR:
            if not valid_year(message.text.strip()):
                bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2018")
                return
            st["year"] = message.text.strip()
            st["step"] = ASK_PHONE
            bot.reply_to(
                message,
                "–ó–∞–ª–∏—à—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–º–æ–∂–Ω–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...) "
                "–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:",
                reply_markup=contact_kb(),
            )
            return

        if step == ASK_PHONE:
            phone = normalize_phone(message.text)
            if len(phone) < 10:
                bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä. –ü—Ä–∏–∫–ª–∞–¥: +380960000000")
                return
