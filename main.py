import os
import csv
import telebot
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

if not TOKEN:
    raise RuntimeError("Set BOT_TOKEN in Render ‚Üí Worker ‚Üí Environment")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# --------- –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ----------
def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ üöó"))
    kb.row(types.KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–∏ üì≤"), types.KeyboardButton("–ü—Ä–æ –Ω–∞—Å ‚ÑπÔ∏è"))
    return kb

# --------- –ü—Ä–æ—Å—Ç–∞ FSM –¥–ª—è –ª—ñ–¥–∞ ----------
USER_STATE = {}  # user_id -> {"step": str, "data": {...}}

def reset_state(uid: int):
    USER_STATE.pop(uid, None)

def set_step(uid: int, step: str):
    USER_STATE.setdefault(uid, {"step": None, "data": {}})["step"] = step

def get_step(uid: int):
    return USER_STATE.get(uid, {}).get("step")

def set_data(uid: int, key: str, value: str):
    USER_STATE.setdefault(uid, {"step": None, "data": {}})["data"][key] = value

def get_data(uid: int):
    return USER_STATE.get(uid, {}).get("data", {})

# --------- –ö–æ–º–∞–Ω–¥–∏ ----------
@bot.message_handler(commands=["start", "help"])
def cmd_start(m: types.Message):
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç autohouse.te üöó\n"
        "–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥–∏ /lead —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É.",
        reply_markup=main_keyboard()
    )

@bot.message_handler(commands=["lead"])
def cmd_lead(m: types.Message):
    uid = m.from_user.id
    reset_state(uid)
    set_step(uid, "car_model")
    bot.send_message(m.chat.id, "–Ø–∫–∞ –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å —Ü—ñ–∫–∞–≤–∏—Ç—å? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Audi Q5 2020)")

@bot.message_handler(commands=["cancel"])
def cmd_cancel(m: types.Message):
    reset_state(m.from_user.id)
    bot.send_message(m.chat.id, "–ì–æ—Ç–æ–≤–æ, —Å–∫–∏–Ω—É–≤ —Ñ–æ—Ä–º—É. –ú–æ–∂–µ—à –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É /lead", reply_markup=main_keyboard())

# --------- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ----------
@bot.message_handler(func=lambda msg: msg.text == "–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ üöó")
def btn_pick(m: types.Message):
    cmd_lead(m)

@bot.message_handler(func=lambda msg: msg.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ üì≤")
def btn_contacts(m: types.Message):
    bot.send_message(
        m.chat.id,
        "–ó–≤'—è–∑–æ–∫:\n"
        "Instagram: @autohouse.te\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +380XXXXXXXXX\n"
        "–ê–±–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–∏—à –∑–∞—è–≤–∫—É ‚Äî –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏–º–æ."
    )

@bot.message_handler(func=lambda msg: msg.text == "–ü—Ä–æ –Ω–∞—Å ‚ÑπÔ∏è")
def btn_about(m: types.Message):
    bot.send_message(
        m.chat.id,
        "autohouse.te ‚Äî –ø—ñ–¥–±—ñ—Ä —ñ –ø—Ä–∏–≥–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ –∑ –°–®–ê –ø—ñ–¥ –∫–ª—é—á.\n"
        "–ï–∫–æ–Ω–æ–º—ñ—è –¥–æ 20%, –ø—Ä–æ–∑–æ—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ü—ñ—è, —Å—É–ø—Ä–æ–≤—ñ–¥ –≤—ñ–¥ –∞—É–∫—Ü—ñ–æ–Ω—É –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
    )

# --------- –õ–æ–≥—ñ–∫–∞ —Ñ–æ—Ä–º–∏ –ø–æ –∫—Ä–æ–∫–∞—Ö ----------
@bot.message_handler(func=lambda m: get_step(m.from_user.id) is not None)
def lead_flow(m: types.Message):
    uid = m.from_user.id
    step = get_step(uid)
    text = (m.text or "").strip()

    if step == "car_model":
        set_data(uid, "car_model", text)
        set_step(uid, "budget")
        bot.send_message(m.chat.id, "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç? (—Å—É–º–∞ —É $ –∞–±–æ –¥—ñ–∞–ø–∞–∑–æ–Ω)")
        return

    if step == "budget":
        set_data(uid, "budget", text)
        set_step(uid, "name")
        bot.send_message(m.chat.id, "–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å? (—ñ–º'—è)")
        return

    if step == "name":
        set_data(uid, "name", text)
        set_step(uid, "phone")
        bot.send_message(m.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω –∞–±–æ Telegram @–Ω—ñ–∫:")
        return

    if step == "phone":
        set_data(uid, "phone", text)
        data = get_data(uid)

        # –ó–±–µ—Ä–µ–≥—Ç–∏ —É CSV
        try:
            header = ["tg_user_id", "name", "phone", "car_model", "budget"]
            file_exists = os.path.exists("leads.csv")
            with open("leads.csv", "a", newline="", encoding="utf-8") as f:
                writer = csv.DictWriter(f, fieldnames=header)
                if not file_exists:
                    writer.writeheader()
                writer.writerow({
                    "tg_user_id": uid,
                    "name": data.get("name", ""),
                    "phone": data.get("phone", ""),
                    "car_model": data.get("car_model", ""),
                    "budget": data.get("budget", "")
                })
        except Exception as e:
            bot.send_message(m.chat.id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç–∏ —É –±–∞–∑—É: {e}")

        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—É
        if ADMIN_ID:
            try:
                bot.send_message(
                    ADMIN_ID,
                    "üÜï <b>–ù–æ–≤–∏–π –ª—ñ–¥</b>\n"
                    f"üë§ {data.get('name','')}\n"
                    f"üìû {data.get('phone','')}\n"
                    f"üöó {data.get('car_model','')}\n"
                    f"üíµ {data.get('budget','')}\n"
                    f"TG ID: <code>{uid}</code>"
                )
            except Exception:
                pass

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        bot.send_message(
            m.chat.id,
            "–î—è–∫—É—é! –ü—Ä–∏–π–Ω—è–≤ –∑–∞—è–≤–∫—É ‚úÖ\n–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏.",
            reply_markup=main_keyboard()
        )
        reset_state(uid)
        return

# --------- –§–æ–ª–±–µ–∫: —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ----------
@bot.message_handler(func=lambda m: True)
def fallback(m: types.Message):
    bot.send_message(
        m.chat.id,
        "–ú–æ–∂—É –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É (/lead), –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∞–±–æ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏.",
        reply_markup=main_keyboard()
    )

if __name__ == "__main__":
    # Long polling ‚Äî –ø—ñ–¥ Render Worker
    bot.infinity_polling(skip_pending=True, timeout=30, long_polling_timeout=30)
